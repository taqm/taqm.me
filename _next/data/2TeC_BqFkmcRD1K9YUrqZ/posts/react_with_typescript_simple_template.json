{"pageProps":{"post":"{\"slug\":\"react_with_typescript_simple_template\",\"title\":\"React & TypeScript をシンプルに始める(create-react-appなし)\",\"publishedAt\":\"2018-09-21T09:10:39.000Z\",\"description\":\"React & TypeScriptの構成をcreate-react-appなしでWebpackで実現するための解説です。\",\"tags\":[\"TypeScript\",\"React\"]}","content":"<p class=\"paragraph\">ココ最近では\n「Reactを触るなら<strong>TypeScript</strong>！」っていうのが\nデファクトスタンダードになっていると思います。（願望）</p>\n<p class=\"paragraph\">布教も兼ねて\n<strong>TypeScript &#x26; React</strong> を１からシンプルに始める方法をまとめてみました。</p>\n<p class=\"paragraph\">ちなみに本家が出している<code class=\"code\">create-react-app</code>は利用しません！</p>\n<h2 class=\"heading lv-2\">環境構築</h2>\n<p class=\"paragraph\">利用する技術について最初にまとめておきます</p>\n<ul class=\"list unordered\">\n<li>Yarn</li>\n<li>TypeScript</li>\n<li>React.js</li>\n<li>webpack</li>\n<li>webpack-dev-server</li>\n</ul>\n<h3 class=\"heading lv-3\">プロジェクトの作成</h3>\n<div class=\"remark-highlight\"><pre class=\"language-bash pre\"><code class=\"language-bash code\"><span class=\"token function\">mkdir</span> ts-react-sample\n<span class=\"token builtin class-name\">cd</span> ts-react-sample\n\n<span class=\"token function\">yarn</span> init -y\n<span class=\"token function\">mkdir</span> src\n</code></pre></div>\n<p class=\"paragraph\">これで最小限のフロントエンドのプロジェクトが整いました。\n用途に合わせて<code class=\"code\">package.json</code>はカスタマイズしてください</p>\n<h3 class=\"heading lv-3\">TypeScriptの準備</h3>\n<p class=\"paragraph\">続いてTypeScriptを使えるようにしていきましょう!</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash pre\"><code class=\"language-bash code\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D typescript ts-node\n<span class=\"token function\">touch</span> tsconfig.json\n</code></pre></div>\n<p class=\"paragraph\">ts-nodeを利用することで、webpackの設定をTypeScriptで記述することができます。\n後述するのでここではこの程度の理解で大丈夫です。</p>\n<p class=\"paragraph\">tsconfig.jsonにTypeScriptでどういった事を行うのか設定していきましょう。\n深掘りしだすとここだけで記事にできるレベルなので簡潔に！</p>\n<div class=\"has-filename\"><div class=\"filename\">./tsconfig.json</div><pre class=\"language-json pre\"><code class=\"language-json code\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"es6\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">Reactを利用するため<code class=\"code\">jsx: \"react\"</code>を設定しています。</p>\n<h3 class=\"heading lv-3\">Reactの準備</h3>\n<div class=\"remark-highlight\"><pre class=\"language-bash pre\"><code class=\"language-bash code\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> react react-dom\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D @types/react @types/react-dom\n</code></pre></div>\n<p class=\"paragraph\"><code class=\"code\">react</code>とは別に<code class=\"code\">react-dom</code>を追加する必要があります。\nDOMというHTML的な要素を操作するものは、reactの本質ではないということで\n一部の機能が切り出されたものが<code class=\"code\">react-dom</code>になります。</p>\n<p class=\"paragraph\">そしてTypeScriptに必要な定義ファイルも忘れずに追加します。</p>\n<h3 class=\"heading lv-3\">webpackの準備</h3>\n<p class=\"paragraph\">ここではwebpackと開発用サーバの設定を行います</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash pre\"><code class=\"language-bash code\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D webpack webpack-cli @types/webpack <span class=\"token comment\">#webpack</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D awesome-typescript-loader <span class=\"token comment\"># typescript</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D webpack-dev-server @types/webpack-dev-server <span class=\"token comment\"># server</span>\n</code></pre></div>\n<p class=\"paragraph\">webpack4系からcliが分離されたため別に追加します。\nそして<code class=\"code\">@types/webpack</code>も追加してしまいましょう。</p>\n<p class=\"paragraph\">先程<code class=\"code\">ts-node</code>を追加したことで、\nwebpackの設定をTypeScriptで記述することができます\n設定ファイルもなかなか覚えることが多いので、\n補完が効く&#x26;コンパイルエラーが出てくれるのは非常に快適です。<a href=\"https://webpack.js.org/configuration/configuration-languages/#typescript\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">公式ページ</a></p>\n<p class=\"paragraph\">ではwebpackの設定ファイルを記述していきましょう</p>\n<div class=\"has-filename\"><div class=\"filename\">webpack.config.ts</div><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">'path'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Configuration <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'webpack'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> config<span class=\"token operator\">:</span> Configuration <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  context<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./index.tsx'</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span>\n    publicPath<span class=\"token operator\">:</span> <span class=\"token string\">'/assets'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token special-escape escape\">\\.</span>tsx<span class=\"token quantifier number\">?</span><span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        use<span class=\"token operator\">:</span> <span class=\"token string\">'awesome-typescript-loader'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    extensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.tsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jsx'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    contentBase<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'static'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    host<span class=\"token operator\">:</span> <span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> config<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">ほとんどwebpackの説明になってしまいますが、\nせっかくなのである程度の説明を行います。</p>\n<h4 class=\"heading lv-4\">$.context</h4>\n<p class=\"paragraph\">ビルド対象となるディレクトリ。\n後述するentryポイントはこのディレクトリからの相対パスになります。</p>\n<h4 class=\"heading lv-4\">$.entry</h4>\n<p class=\"paragraph\">エントリーポイントとなるファイル。\nまだ作成していませんが<code class=\"code\">src/index.tsx</code>を作る予定です。</p>\n<p class=\"paragraph\">複数のファイルをエントリーとして、複数ファイルを出力したい場合は、\nここをオブジェクトにすることができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token punctuation\">{</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    index<span class=\"token operator\">:</span> <span class=\"token string\">'./index.tsx'</span><span class=\"token punctuation\">,</span>\n    about<span class=\"token operator\">:</span> <span class=\"token string\">'./about.tsx'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 class=\"heading lv-4\">$.output</h4>\n<p class=\"paragraph\">成果物に対する設定。</p>\n<p class=\"paragraph\"><strong>path</strong>\n成果物の出力先。\nここは絶対パスである必要があるので<strong>要注意</strong>です。</p>\n<p class=\"paragraph\"><strong>filename</strong>\n成果物のファイル名。\nentryが複数ある場合は<code class=\"code\">[name].bundle.js</code>とすることで\n複数のファイルを出力することになります。</p>\n<p class=\"paragraph\"><strong>publickPath</strong>\nwebpack-dev-serverを利用してローカルサーバを起動したときに、\n成果物をどのパスにマッピングするのかを設定します。\n上記の記述であれば\n<code class=\"code\">http://localhost:8080/assets/bundle.js</code>でアクセスできるようになります。</p>\n<h4 class=\"heading lv-4\">$.module.rules</h4>\n<p class=\"paragraph\">特定のルールに当てはまるものをどう処理していくかの定義。\n今回は正規表現<code class=\"code\">\\.tsx?$/</code>に当てはまるものに\n<code class=\"code\">awesome-typescript-loader</code>を使ってトランスパイルを行うようにしています。</p>\n<p class=\"paragraph\"><code class=\"code\">ts-loader</code>とどちらを紹介するのか悩んだのですが、単純にスターが多い方を選びました</p>\n<p class=\"paragraph\"><strong>※ 追記</strong>\n現在<code class=\"code\">awesome-typescript-loader</code>はアーカイブされているので\nここ最近では<code class=\"code\">ts-loader</code>、もしくは<code class=\"code\">babel-loader</code>でトランスパイルするほうが主流となってそうです。</p>\n<h4 class=\"heading lv-4\">$.resolve.extensions</h4>\n<p class=\"paragraph\">ソースの中で<code class=\"code\">import</code>するときに解決してくれる拡張子。\n今回はTypeScriptなので<code class=\"code\">.ts</code>と<code class=\"code\">.tsx</code>でいいかと思いきや、\nReactなどyarn(npm)でインストールしたものの解決も必要なので<code class=\"code\">.js</code>と<code class=\"code\">.jsx</code>も設定します。</p>\n<p class=\"paragraph\"><code class=\"code\">.(ドット)</code>がないと動かないので<strong>要注意</strong>です</p>\n<h4 class=\"heading lv-4\">$.devServer</h4>\n<p class=\"paragraph\">ローカル開発用サーバの設定。</p>\n<p class=\"paragraph\"><strong>contentBase</strong>\nドキュメントルートをどこにするかです。\n今は空ですが<code class=\"code\">./static</code>を設定します。</p>\n<p class=\"paragraph\"><strong>host</strong>\n実はこの設定はなくても動くのですが、\n他の端末からローカルIPで接続するときにはこの設定が必要になります。\n僕はMacで開発しながら、WindowsマシンのIEで確認などを行うのでこの設定を入れています。</p>\n<h2 class=\"heading lv-2\">動かしてみる</h2>\n<h3 class=\"heading lv-3\">HTMLの準備</h3>\n<p class=\"paragraph\">webpack-dev-serverで表示するためのHTMLを用意しましょう。</p>\n<div class=\"has-filename\"><div class=\"filename\">./static/index.html</div><pre class=\"language-html pre\"><code class=\"language-html code\"><span class=\"token doctype\"><span class=\"token punctuation\">&#x3C;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ja<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>title</span><span class=\"token punctuation\">></span></span>Example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/assets/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p class=\"paragraph\">最高にシンプルですね\nIDが<code class=\"code\">app</code>のdivが存在していることだけ頭において次へ進みます！</p>\n<h3 class=\"heading lv-3\">ついにReact</h3>\n<p class=\"paragraph\">やっと本題であるReact&#x26;TypeScriptが登場です！！\nwebpackに記載したエントリーポイントのファイルを作成しましょう</p>\n<div class=\"has-filename\"><div class=\"filename\">./src/index.tsx</div><pre class=\"language-tsx pre\"><code class=\"language-tsx code\"><span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">ReactDOM</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello React with TypeScript!!!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">Reactの説明はなしにしますが、これで動くはず。\n以下のコマンドでサーバを起動してみましょう</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash pre\"><code class=\"language-bash code\"><span class=\"token function\">yarn</span> webpack-dev-server --mode development\n<span class=\"token comment\"># 何度も使うコマンドなのでscriptsに登録してしまうことをおすすめします</span>\n</code></pre></div>\n<p class=\"paragraph\">無事に起動したら<a href=\"http://localhost:8080\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">http://localhost:8080</a>へアクセスしてみましょう。</p>\n<p class=\"paragraph\">こんな画面がでたら成功です\n</p>\n<p class=\"paragraph\">無事にTypeScriptでReactを動かすことができました！</p>\n<h2 class=\"heading lv-2\">せめて、TypeScriptらしく</h2>\n<p class=\"paragraph\">今のままだとほぼES6と変わらずTypeScript感があまりありませんね\nTypeScriptだと実際にどんないいことがあるのかを実例を載せながら紹介します。</p>\n<h3 class=\"heading lv-3\">PropsとStateの型を定義する</h3>\n<p class=\"paragraph\">JavaScriptだと<code class=\"code\">prop-types</code>といったもの使っていたのですが、\n実行時にしかチェックが走らない上に、扱いづらい代物です。</p>\n<p class=\"paragraph\">TypeScriptを利用することで、強力な型チェックの恩恵をうけることができます。</p>\n<div class=\"has-filename\"><div class=\"filename\">./src/App.tsx</div><pre class=\"language-tsx pre\"><code class=\"language-tsx code\"><span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">OuterProps</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">AppState</span> <span class=\"token punctuation\">{</span>\n  sec<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">OuterProps</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">AppState</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">AppState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    sec<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// thisを縛るためにはTypeScriptだとBindは使わず</span>\n  <span class=\"token comment\">// アロー関数を定義する</span>\n  <span class=\"token function-variable function\">incrementeSec</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      sec<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">sec</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ← ここで補完が効く!あと型が違うとエラーになる！</span>\n      message<span class=\"token operator\">:</span> <span class=\"token string\">'unknown fields...'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ← AppStateに定義されていないのでエラー！</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">incrementeSec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> sec <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">sec</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ← ここで補完が効く！！</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">hoge</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ← AppStateに定義されていないのでエラー</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">fuga</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ← OuterPropsに定義されていないのでエラー</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">いま...</span><span class=\"token punctuation\">{</span>sec<span class=\"token punctuation\">}</span><span class=\"token plain-text\">秒経過しました</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">&#x3C;br /></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">onClick</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">ボタンです</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token maybe-class-name\">App</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// StatelessFunctionComponent(SFC)の場合はこんな感じ</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">App2</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SFC</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">OuterProps</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">onClick</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">ボタン</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre></div>\n<div class=\"has-filename\"><div class=\"filename\">./index.tsx</div><pre class=\"language-tsx pre\"><code class=\"language-tsx code\"><span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword module\">as</span> <span class=\"token maybe-class-name\">ReactDOM</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token maybe-class-name\">ReactDOM</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">App</span>\n    onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// ← onClickがないとエラー</span>\n    onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// ← 未定義の属性はエラー</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">すごくざっくりですがTypeScriptの紹介はこんな感じになります</p>\n<p class=\"paragraph\"><code class=\"code\">React.Component&#x3C;Props, State></code>と宣言することで\n色々と補完やエラーチェックが効くのでとても快適です。</p>\n<p class=\"paragraph\">また、<code class=\"code\">index.tsx</code>を見てもらうと分かるように\nJSX形式の記述に対しても型の補完がやエラーチェックがかかるため、\n実行時エラーが格段に減ります。</p>\n<p class=\"paragraph\">あとはES6でやっていたことをTypeScriptに置き換えるだけで\n型安全なプログラムを組むことが保証されます。</p>\n<p class=\"paragraph\">#　最後に\nほとんどがwebpackの説明でしたが、簡単に動くところまで行けました！\n実はES6で動かすよりもTypeScriptのほうが設定は簡単です。(babelは色々と大変)</p>\n<p class=\"paragraph\">正直Reactに限らず、ある程度大きなプロダクトなら\nTypeScriptを使わないメリットはないと思っているので、\n皆さんTypeScriptをどんどん利用していきましょう！</p>\n<p class=\"paragraph\">おしまい＾＾</p>"},"__N_SSG":true}