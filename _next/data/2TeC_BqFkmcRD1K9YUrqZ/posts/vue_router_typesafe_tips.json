{"pageProps":{"post":"{\"slug\":\"vue_router_typesafe_tips\",\"title\":\"vue-routerを無理やりTypeScriptで型安全にする\",\"publishedAt\":\"2018-11-07T05:13:53.000Z\",\"description\":\"TypeScriptでVue-routerを使う際に可能な限り方安全にするためのtipsです。\",\"tags\":[\"Vue\",\"TypeScript\"]}","content":"<p class=\"paragraph\">vue-routerをTypeScriptで使うと\nどうも型安全じゃないのが気になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ここになんでも入っちゃう！'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'ここにもなんでも入っちゃう！！'</span><span class=\"token operator\">:</span> <span class=\"token string\">'hogehoge'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">そこですこし無理やりですがVueRouterを拡張して\nいい感じになるようにしてみました。</p>\n<h2 class=\"heading lv-2\">ゴール</h2>\n<p class=\"paragraph\">少し長くなるので最終的にどうなるかを先に書いちゃいます。\n今回の目的はライブラリの作成ではなく、\nスニペットの作成だと思っていただけると良いです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">pushTo</span><span class=\"token punctuation\">(</span>RouteNames<span class=\"token punctuation\">.</span>Detail<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'sample'</span><span class=\"token punctuation\">,</span>\n    hoge<span class=\"token operator\">:</span> <span class=\"token string\">'fuga'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 定義していないparamsはエラー</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">pushTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// もちろん 定義したenumじゃないとエラー</span>\n</code></pre></div>\n<p class=\"paragraph\">新しいメソッドをVueRouterに実装します。\n第１引数に<code class=\"code\">enum</code>を渡し、\n第２引数には<strong>第１引数に応じたパラメータ</strong>しか渡せないようになっています。</p>\n<p class=\"paragraph\">ソースコードは<a href=\"https://github.com/taqm/typesafe-vue-router-sample\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">こちら(GitHub)</a></p>\n<h2 class=\"heading lv-2\">解説！</h2>\n<h3 class=\"heading lv-3\">ディレクトリ構造</h3>\n<p class=\"paragraph\">ディレクトリ構成は以下のような状況です。\nトップ画面 → 検索結果画面 → 詳細画面\nといったありがちなルーティングをサンプルとして扱っていきます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown pre\"><code class=\"language-unknown code\">├── App.vue\n├── main.ts\n├── router\n│   ├── extension.ts\n│   ├── index.ts\n│   └── route.types.ts\n└── views\n    ├── DetailPage.vue\n    ├── IndexPage.vue\n    └── ListPage.vue</code></pre></div>\n<p class=\"paragraph\">他にもいろいろ必要なのですが今回は省略しています。\n一応<code class=\"code\">App.vue</code>と<code class=\"code\">main.ts</code>の中身を先に紹介しますが\n最小限になっていますので無視していただいても大丈夫です。</p>\n<div class=\"has-filename\"><div class=\"filename\">./main.ts</div><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span>\n<span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">'./router'</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  router<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> h <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"has-filename\"><div class=\"filename\">./App.vue</div><pre class=\"language-vue pre\"><code class=\"language-vue code\">&#x26;lt;template&#x26;gt;\n  &#x26;lt;div&#x26;gt;\n    &#x26;lt;router-view/&#x26;gt;\n  &#x26;lt;/div&#x26;gt;\n&#x26;lt;/template&#x26;gt;</code></pre></div>\n<p class=\"paragraph\"><code class=\"code\">main.ts</code>について１つだけ補足</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">'./router'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">知っている人も多いかと思いますが、\n<code class=\"code\">from</code> でディレクトリを指定することで、<code class=\"code\">index.ts</code>が読み込まれます。\n特に今回重要な要素ではないので特に触れません。</p>\n<h3 class=\"heading lv-3\">VueRouterを拡張</h3>\n<p class=\"paragraph\">型が曖昧なライブラリ群を型安全にするためには以下の方法が考えられます。</p>\n<ol class=\"list ordered\">\n<li>ラッパークラス(モジュール)を作成する</li>\n<li>本体を拡張する</li>\n</ol>\n<p class=\"paragraph\">今回は「2. 本体を拡張する」を選択しました。</p>\n<h4 class=\"heading lv-4\">ルーティングの定義</h4>\n<p class=\"paragraph\">まずは型安全にするために、各ルーティングを定義していきましょう！\n今回は</p>\n<ul class=\"list unordered\">\n<li>Index</li>\n<li>List</li>\n<li>Detail</li>\n</ul>\n<p class=\"paragraph\">といった3つの画面を作成します。\n<code class=\"code\">List</code>に行くためには検索ワード<code class=\"code\">keyword</code>を。\n<code class=\"code\">Detail</code>に行くためには<code class=\"code\">id</code>を渡す想定としましょう。</p>\n<div class=\"has-filename\"><div class=\"filename\">./router/route.types.ts</div><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> RouteNames <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">INDEX</span> <span class=\"token operator\">=</span> <span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">LIST</span> <span class=\"token operator\">=</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">DETAIL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'detail'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StrRecord</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Query<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> StrRecord<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> query<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Params<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> StrRecord<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> params<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ListOption</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  Query<span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span> keyword<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">DetailOption</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  Params<span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">RouteOption</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  ［RouteNames<span class=\"token punctuation\">.</span><span class=\"token constant\">INDEX</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  ［RouteNames<span class=\"token punctuation\">.</span><span class=\"token constant\">LIST</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> ListOption<span class=\"token punctuation\">,</span>\n  ［RouteNames<span class=\"token punctuation\">.</span><span class=\"token constant\">DETAIL</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> DetailOption<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">各画面を<code class=\"code\">enum RouteNames</code>として定義しますが\n後に<code class=\"code\">router</code>の<code class=\"code\">name</code>に指定するので文字列にすることが必須。</p>\n<p class=\"paragraph\"><code class=\"code\">RouteOption</code>にて各画面遷移時にどういったパラメータが必要なのかを関連付けます。\n（Indexなどパラメータがない場合は空にしています)</p>\n<p class=\"paragraph\">画面遷移時に渡すものの標準として<code class=\"code\">Query</code>と<code class=\"code\">Params</code>を定義していますが、\nもし<code class=\"code\">hash</code>なども渡したい場合は同じ要領でtypeを定義してください。</p>\n<p class=\"paragraph\">この<code class=\"code\">Query</code>などは<code class=\"code\">this.$route.xxxx</code>とアクセスするときのIFなので\n正しく定義する必要がある点が注意するポイントです。</p>\n<p class=\"paragraph\">あえて説明は不要かもしれませんが、\n<code class=\"code\">Query</code>と<code class=\"code\">Params</code>をそれぞれ送りたい！と言った場合には以下のようにすると良いです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">SampleOption</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&#x26;</span> Query<span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span> hoge<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&#x26;</span> Params<span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span> fuga<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 class=\"heading lv-4\">VueRouterの拡張</h4>\n<p class=\"paragraph\">前項で定義したルーティング定義を用いて\nVueRouterそのものを拡張していきます。</p>\n<h5 class=\"heading lv-5\">定義の拡張</h5>\n<div class=\"has-filename\"><div class=\"filename\">./router/extension.ts</div><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">import</span> VueRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RouteOption <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./route.types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'vue-router/types/router'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">VueRouter</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token generic-function\"><span class=\"token function\">pushTo</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> RouteOption<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>to<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> option<span class=\"token operator\">:</span> RouteOption<span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">この定義で<code class=\"code\">VueRouter</code>の型定義へメソッドを追加します。\nメソッド名は<code class=\"code\">pushTo</code>としており</p>\n<ul class=\"list unordered\">\n<li>第１引数は 遷移先</li>\n<li>第２引数は 遷移先が求めるパラメータ</li>\n</ul>\n<p class=\"paragraph\">となります。\n第一引数の値の型(<code class=\"code\">enum</code>)からRouteOptionへ参照させていますが\nRouteOptionのキーは<code class=\"code\">RouteNames</code>なので、\n呼び出し時は</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">pushTo</span><span class=\"token punctuation\">(</span>RouteNames<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/* */</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">といったように記述することができます。</p>\n<p class=\"paragraph\">そして、第２引数は<code class=\"code\">RouteOption</code>で定義した\n<code class=\"code\">Query</code>や<code class=\"code\">Params</code>のオブジェクトしか受け付けないようになっており\n遷移時に誤ったパラメータを渡すことを防ぎます！</p>\n<h5 class=\"heading lv-5\">定義の実装</h5>\n<p class=\"paragraph\">前項で定義したメソッドを実際に実装します。</p>\n<div class=\"has-filename\"><div class=\"filename\">./router/extension.ts</div><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>router<span class=\"token operator\">:</span> VueRouter<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> VueRouter <span class=\"token punctuation\">{</span>\n  router<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">pushTo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> RouteOption<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    to<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>\n    option<span class=\"token operator\">:</span> RouteOption<span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> to<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>option <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'エラー発生'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> router<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">この<code class=\"code\">enhance</code>関数へ、<code class=\"code\">VueRouter</code>のインスタンスを渡し、\n拡張する作りとなっています。</p>\n<p class=\"paragraph\">この関数の中でメソッドを実装しましょう。\n一言で言うと<code class=\"code\">pushTo</code>メソッドは、本家の<code class=\"code\">push</code>メソッドのラップメソッドです。</p>\n<p class=\"paragraph\">第一引数を<code class=\"code\">push</code>のnameへ。\nその他はそのままオプションとして追加しております。\n<code class=\"code\">RouteOption[T]</code>だと<code class=\"code\">push</code>の引数に与えられないので\nここは素直に<code class=\"code\">any</code>にすることで解決しました。(これは仕方ないはず！)</p>\n<h7>課題</h7>\n<p class=\"paragraph\">ここで課題として残ったことが、<code class=\"code\">Index</code>など\nパラメータを必要としないものかどうかを判定して、\nメソッドの引数を<code class=\"code\">Optional</code>にできなかった点です。</p>\n<p class=\"paragraph\">そのため<code class=\"code\">Index</code>へ遷移する際は、第２引数に空オブジェクトを渡す必要があります:frowning2:\n悔しいですが今後の課題としてここは前に進みました。</p>\n<h3 class=\"heading lv-3\">ルーティングの実装</h3>\n<p class=\"paragraph\">ほぼ基本通りの作りになります</p>\n<div class=\"has-filename\"><div class=\"filename\">./router/index.ts</div><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> Router <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RouteNames <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./route.types'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> enhance <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./extension'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> IndexPage <span class=\"token keyword\">from</span> <span class=\"token string\">'../views/IndexPage.vue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ListPage <span class=\"token keyword\">from</span> <span class=\"token string\">'../views/ListPage.vue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> DetailPage <span class=\"token keyword\">from</span> <span class=\"token string\">'../views/DetailPage.vue'</span><span class=\"token punctuation\">;</span>\n\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  mode<span class=\"token operator\">:</span> <span class=\"token string\">'history'</span><span class=\"token punctuation\">,</span>\n  base<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">BASE_URL</span><span class=\"token punctuation\">,</span>\n  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> RouteNames<span class=\"token punctuation\">.</span><span class=\"token constant\">INDEX</span><span class=\"token punctuation\">,</span>\n      component<span class=\"token operator\">:</span> IndexPage<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">'/items'</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> RouteNames<span class=\"token punctuation\">.</span><span class=\"token constant\">LIST</span><span class=\"token punctuation\">,</span>\n      component<span class=\"token operator\">:</span> ListPage<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">'/items/:id'</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> RouteNames<span class=\"token punctuation\">.</span><span class=\"token constant\">DETAIL</span><span class=\"token punctuation\">,</span>\n      component<span class=\"token operator\">:</span> DetailPage<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">一つだけ絶対に忘れてはいけないことあります。\nexportする前に先ほど作成した<code class=\"code\">enhance</code>関数を呼び出して、\nrouterを拡張した状態で外部へ提供しましょう。</p>\n<h3 class=\"heading lv-3\">実際にコンポーネントから使ってみる</h3>\n<div class=\"has-filename\"><div class=\"filename\">./views/IndexPage.vue</div><pre class=\"language-vuejs pre\"><code class=\"language-vuejs code\">&#x26;lt;template&#x26;gt;\n  &#x26;lt;form @submit.prevent=&#x26;quot;onSubmit&#x26;quot;&#x26;gt;\n    &#x26;lt;input v-model=&#x26;quot;keyword&#x26;quot; required&#x26;gt;\n    &#x26;lt;input type=&#x26;quot;submit&#x26;quot; value=&#x26;quot;送信&#x26;quot;&#x26;gt;\n  &#x26;lt;/form&#x26;gt;\n&#x26;lt;/template&#x26;gt;\n\n&#x26;lt;script lang=&#x26;quot;ts&#x26;quot;&#x26;gt;\nimport Vue from &#x26;#39;vue&#x26;#39;\nimport { RouteNames } from &#x26;#39;@/router/route.types&#x26;#39;;\n\nexport default Vue.extend({\n  data() {\n    return {\n      keyword: &#x26;#39;&#x26;#39;,\n    };\n  },\n  methods: {\n    onSubmit() {\n      this.$router.pushTo(RouteNames.LIST, {\n        query: {\n          keyword: this.keyword,\n        },\n      });\n    },\n  },\n});\n&#x26;lt;/script&#x26;gt;</code></pre></div>\n<p class=\"paragraph\"><code class=\"code\">methods</code>内の<code class=\"code\">onSubmit</code>で今回実装した<code class=\"code\">puthTo</code>を使っています。\n<code class=\"code\">RouteNAmes.LIST</code>へ遷移するためには、<code class=\"code\">keyword</code>が必要なので\n第２引数ではこの形のオブジェクトを渡すことを強制しています。</p>\n<p class=\"paragraph\">実際に動くサンプルをGitHubへ上げているので\n他の画面については割愛させてもらいます。\n<a href=\"https://github.com/taqm/typesafe-vue-router-sample\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">サンプル</a></p>\n<h2 class=\"heading lv-2\">残った課題</h2>\n<p class=\"paragraph\">今回モジュールの拡張を行ってみましたが、\n大きく２つの課題が残りました。</p>\n<p class=\"paragraph\">上でも書いたのですが、\n<strong>パラメータを必要としないルーティングには空オブジェクトを渡す必要がある</strong>\nです。まあ野暮ったいだけで実害はあまりないのでよいです。</p>\n<p class=\"paragraph\">もう一つが<strong>パラメータを利用する側が型に守られない</strong>ことです。</p>\n<p class=\"paragraph\">遷移先のコンポーネントでは以下のようにして値を取る必要があります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\">computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">keyword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> option<span class=\"token operator\">:</span> ListOption <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> option<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>keyword<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p class=\"paragraph\">各コンポーネントに<code class=\"code\">any</code>が入ってくるのはとてもつらいです\n今の所「これだ！！！」という解決策は見つかっていないので\nどこかでちゃんと対策してみたいです。</p>\n<h2 class=\"heading lv-2\">最後に</h2>\n<p class=\"paragraph\">今回やってみた内容は実際に業務でも使ってみました。\n実際に使ってみるとルーティング周りのミスはかなり減りました。\nやはり型に縛られるのは気持ちいですね:relaxed:</p>\n<p class=\"paragraph\">ただし、こういった拡張を乱発しすぎると\nなにか起きたときに問題の切り分けなどが難しくなりかねないので\nほどほどにしましょう。</p>\n<hr>\n<p class=\"paragraph\">おしまい</p>"},"__N_SSG":true}