{"pageProps":{"post":"{\"slug\":\"read__types_react\",\"title\":\"@types/react の中を少し読んでみる\",\"publishedAt\":\"2019-12-13T23:32:19.000Z\",\"description\":\"Reactの型定義として提供されている'@types/react'の実装を読んでみて解説です。\",\"tags\":[\"React\",\"TypeScript\"]}","content":"<h2 class=\"heading lv-2\">注意</h2>\n<p class=\"paragraph\">この記事は2019/12時点の記事です。\nReactのバージョンも上がり<code class=\"code\">React.VFC</code>なども登場しているのでご注意ください</p>\n<h2 class=\"heading lv-2\">はじめに</h2>\n<p class=\"paragraph\">ここ最近はTypeScriptを利用することがデファクトスタンダードになりつつありますね。\nそこでその際に必要になるReactの型定義(<code class=\"code\">@types/react</code>)について色々おさらいしてみます。</p>\n<p class=\"paragraph\">対象のパッケージは<a href=\"https://www.npmjs.com/package/@types/react\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">こちら</a></p>\n<p class=\"paragraph\">npm: <a href=\"https://www.npmjs.com/package/@types/react\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.npmjs.com/package/@types/react</a>\nGitHub: <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react</a></p>\n<h2 class=\"heading lv-2\">解説</h2>\n<p class=\"paragraph\"><code class=\"code\">@types/react</code>では<code class=\"code\">global.d.ts</code>と<code class=\"code\">index.d.ts</code>の２つのファイルが提供されていますので\nそれぞれを見ていきましょう。</p>\n<h3 class=\"heading lv-3\"><code class=\"code\">global.d.ts</code></h3>\n<p class=\"paragraph\"><a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react/global.d.ts\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react/global.d.ts</a></p>\n<p class=\"paragraph\">見てみるとわかるのですが空のinterface定義が並んでいます。\nそしてファイルの先頭に下記のコメントが。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token comment\">/*</span>\n<span class=\"token comment\">React projects that don't include the DOM library need these interfaces to compile.</span>\n<span class=\"token comment\">React Native applications use React, but there is no DOM available. The JavaScript runtime</span>\n<span class=\"token comment\">is ES6/ES2015 only. These definitions allow such projects to compile with only `--lib ES6`.</span>\n<span class=\"token comment\">Warning: all of these interfaces are empty. If you want type definitions for various properties</span>\n<span class=\"token comment\">(such as HTMLInputElement.prototype.value), you need to add `--lib DOM` (via command line or tsconfig.json).</span>\n<span class=\"token comment\">*/</span>\n</code></pre></div>\n<p class=\"paragraph\">適当に訳すと\n「これらの定義を用意することで<code class=\"code\">lib.dom</code>を読み込まなくてもコンパイルできるようになります」\n「ただし、\b空の定義なのでプロパティなどにアクセスしたいのならちゃんと読み込んでね」\nってことみたいです。</p>\n<p class=\"paragraph\">大体は<code class=\"code\">lib.dom</code>を読み込むと思うのでこのファイルはあまり気にしなくていいかもしれません。</p>\n<h3 class=\"heading lv-3\"><code class=\"code\">index.d.ts</code></h3>\n<p class=\"paragraph\"><a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react/index.d.ts\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react/index.d.ts</a></p>\n<p class=\"paragraph\">それではReact本体の型定義を見ていきます。\n今回紹介する定義は以下になります。</p>\n<ul class=\"list unordered\">\n<li><a href=\"#reactcomponent\" class=\"anchor\">React.Component</a></li>\n<li><a href=\"#reactcomponentclass\" class=\"anchor\">React.ComponentClass</a></li>\n<li><a href=\"#reactfunctioncomponent\" class=\"anchor\">React.FunctionComponent</a></li>\n<li><a href=\"#reactcomponenttype\" class=\"anchor\">React.ComponentType</a></li>\n<li><a href=\"#reactcomponentprops\" class=\"anchor\">React.ComponentProps</a></li>\n<li><a href=\"#reactreactnode\" class=\"anchor\">React.ReactNode</a></li>\n<li><a href=\"#reactcomponentprops\" class=\"anchor\">React.ComponentProps</a></li>\n<li><a href=\"#reactreactdom\" class=\"anchor\">React.ReactDOM</a></li>\n</ul>\n<h4 class=\"heading lv-4\">React.Component</h4>\n<p class=\"paragraph\">言わずとしれたクラスコンポーネントの型です。\n正確にはクラスなのですが重要なのでとりあげます。</p>\n<div class=\"has-filename\"><div class=\"filename\">型定義</div><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Component<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SS</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ComponentLifecycle<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SS</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">実際はクラスなので継承して使うことになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx pre\"><code class=\"language-tsx code\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">State</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Props</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">State</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">これで<code class=\"code\">this.props</code>や<code class=\"code\">this.state</code>,<code class=\"code\">this.setState</code>などが型安全になりました。</p>\n<h5 class=\"heading lv-5\">contextType</h5>\n<p class=\"paragraph\">クラスの定義をよく読むとこんな記述が。</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx pre\"><code class=\"language-tsx code\"><span class=\"token keyword\">static</span> contextType<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Context</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\ncontext<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">これはContextAPIをクラスコンポーネントで利用する際の型定義になるのですが\n<code class=\"code\">any</code>と書かれているので実際に使う際は以下のようにしてあげましょう。</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx pre\"><code class=\"language-tsx code\"><span class=\"token keyword\">const</span> hogeCtx <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Props</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">State</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> contextType <span class=\"token operator\">=</span> hogeCtx<span class=\"token punctuation\">;</span>\n    context<span class=\"token operator\">!</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ContextType</span></span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typeof</span> hogeCtx<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">context</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">TypeScript3.7以降であれば以下の書き方になります</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx pre\"><code class=\"language-tsx code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Props</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">State</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> contextType <span class=\"token operator\">=</span> hogeCtx<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">declare</span> context<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ContextType</span></span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typeof</span> hogeCtx<span class=\"token operator\">></span>\n    <span class=\"token comment\">// ↑ここが変数の再定義ではなく型の定義のみでよい</span>\n    <span class=\"token spread operator\">...</span>\n</code></pre></div>\n<p class=\"paragraph\">こうすることで <code class=\"code\">this.context</code> が型安全に利用することができます。</p>\n<h5 class=\"heading lv-5\">注記</h5>\n<p class=\"paragraph\">React 16.3より前から存在する<code class=\"code\">Legacy Context</code>についても同様に<code class=\"code\">this.context</code>を利用していました。\nその場合は<code class=\"code\">contextType</code>の定義はせず<code class=\"code\">any</code>のまま利用するほうが良いかと思います。</p>\n<h4 class=\"heading lv-4\">React.ComponentClass</h4>\n<p class=\"paragraph\">これは<code class=\"code\">React.Component</code>などのインターフェースになります。</p>\n<div class=\"has-filename\"><div class=\"filename\">型定義</div><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ComponentClass<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span> <span class=\"token operator\">=</span> ComponentState<span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StaticLifecycle<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Component<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    propTypes<span class=\"token operator\">?</span><span class=\"token operator\">:</span> WeakValidationMap<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    contextType<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Context<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    contextTypes<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ValidationMap<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    childContextTypes<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ValidationMap<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    defaultProps<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Partial<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    displayName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">クラスとインターフェースと何が違うのかというと言語化が難しいのですが以下のような挙動になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx pre\"><code class=\"language-tsx code\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hoge</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Component</span></span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Props</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> hoge<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Hoge</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Hoge</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// これはエラー</span>\n<span class=\"token keyword\">const</span> hogeType<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ComponentClass</span></span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Props</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Hoge</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">クラスにするということはインスタンスの型となるため、\n純粋なコンポーネントのインターフェースが欲しい場合はこちらの型を使うことになります。\n具体的な利用例は後述する<code class=\"code\">React.ComponentType</code>でご紹介します。</p>\n<h4 class=\"heading lv-4\">React.FunctionComponent</h4>\n<p class=\"paragraph\">関数型コンポーネントの型となる<code class=\"code\">FunctionComponent</code>です。\n最近はクラスコンポーネントよりもこちらのほうが主流ですね。</p>\n<p class=\"paragraph\">エイリアスとして<code class=\"code\">React.FC</code>というものもあります。（私は短いほうが好きなのでこちらを多用しています</p>\n<div class=\"has-filename\"><div class=\"filename\">型定義</div><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">FunctionComponent<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> PropsWithChildren<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReactElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    propTypes<span class=\"token operator\">?</span><span class=\"token operator\">:</span> WeakValidationMap<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    contextTypes<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ValidationMap<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    defaultProps<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Partial<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    displayName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">FC</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> FunctionComponent<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">ここではそれぞれのプロパティについて説明します。</p>\n<h5 class=\"heading lv-5\">関数本体</h5>\n<p class=\"paragraph\">関数の第２引数は<code class=\"code\">Legacy Context</code>の値になるので最近だと利用することはないです。\n(非推奨なのでanyのまま放置されているのだと思います)</p>\n<h5 class=\"heading lv-5\">propsTypes</h5>\n<p class=\"paragraph\"><code class=\"code\">propsTypes</code>もありますがTypeScriptの場合はコンパイルエラーでカバーできるので\nわざわざ記述することはなくなりました。</p>\n<h5 class=\"heading lv-5\">contextTypes</h5>\n<p class=\"paragraph\"><code class=\"code\">contextTypes</code>についても<code class=\"code\">Legacy Context</code>関連なので無視！</p>\n<h5 class=\"heading lv-5\">defaultProps</h5>\n<p class=\"paragraph\">こちらは<code class=\"code\">props</code>に対してデフォルト値を与えるものになります（そのまま\n個人的には<code class=\"code\">defaultProps</code>で定義した項目はoptionalじゃなくできるようになってほしいです...</p>\n<h5 class=\"heading lv-5\">displayName</h5>\n<p class=\"paragraph\">これを設定しておくことでデバッグ時などにコンポーネント名として表示してくれます。\nminify時に関数名などは消えてしまいデバッグが辛いので極力設定しましょう!</p>\n<p class=\"paragraph\"><strong>ちなみに</strong>\nHooksが出てくるまでは<code class=\"code\">StatelessFunctionComponent</code>(<code class=\"code\">SFC</code>)というものがありましたが\n現在は非推奨になっているためこちらに切り替えましょう。</p>\n<h4 class=\"heading lv-4\">React.ComponentType</h4>\n<p class=\"paragraph\">まずは型定義</p>\n<div class=\"has-filename\"><div class=\"filename\">型定義</div><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ComponentType<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> ComponentClass<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> FunctionComponent<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">上記で説明した「クラスコンポーネントor関数コンポーネント」という型で、\n「とにかくコンポーネントがほしい！！」って場合に利用します。\n具体的な例はこちら</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx pre\"><code class=\"language-tsx code\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">WithHoge</span> <span class=\"token punctuation\">{</span>\n  hoge<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">withHoge</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> WithHoge<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n    <span class=\"token maybe-class-name\">Component</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ComponentType</span></span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Omit</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">keyof</span> <span class=\"token maybe-class-name\">WithHoge</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> inProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>props<span class=\"token punctuation\">,</span> hoge<span class=\"token operator\">:</span> <span class=\"token string\">'value'</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Component</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">inProps</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">このようなHOCを作ったりする場合は、\n関数コンポーネントでもクラスコンポーネントでもよいのでComponentTypeを利用すると良いです。\nその他にもコンポーネントそのものを受け渡す場合はこちら利用していきましょう。</p>\n<h4 class=\"heading lv-4\">React.ReactNode</h4>\n<p class=\"paragraph\"><code class=\"code\">React.Component</code>の<code class=\"code\">render()</code>の戻り値など色んな所で登場してくる<code class=\"code\">React.ReactNode</code>。\n簡単に言うと「JSXの中で存在できる要素」を指します。(この表現が正しいかはあやしい)</p>\n<div class=\"has-filename\"><div class=\"filename\">型定義</div><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ReactNode</span> <span class=\"token operator\">=</span> ReactChild <span class=\"token operator\">|</span> ReactFragment <span class=\"token operator\">|</span> ReactPortal <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 関連↓</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ReactText</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ReactChild</span> <span class=\"token operator\">=</span> ReactElement <span class=\"token operator\">|</span> ReactText<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">コンポーネントでも文字列でも数字でもなんでも来い！っていう定義で\n「とにかくJSXの中に突っ込みたいけど型がバラバラ」といった場合に活躍します。</p>\n<p class=\"paragraph\"><strong>ちなみに</strong>\n関数コンポーネント(<code class=\"code\">FunctionComponent</code>)の戻り値は<code class=\"code\">ReactElement</code>です。\nなので<code class=\"code\">undefined</code>や数値など適当なものは返却できないようになっています。\n（Component.renderはできるのに）</p>\n<h4 class=\"heading lv-4\">React.ComponentProps</h4>\n<p class=\"paragraph\">これは便利な型として紹介いたします。\nコンポーネントからPropsのを抜き出す際に利用します。</p>\n<div class=\"has-filename\"><div class=\"filename\">型定義</div><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ComponentProps<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>IntrinsicElements <span class=\"token operator\">|</span> JSXElementConstructor<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">any</span><span class=\"token operator\">>></span></span> <span class=\"token operator\">=</span>\n    <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JSXElementConstructor<span class=\"token operator\">&#x3C;</span>infer <span class=\"token constant\">P</span><span class=\"token operator\">></span></span>\n        <span class=\"token operator\">?</span> <span class=\"token constant\">P</span>\n        <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>IntrinsicElements\n            <span class=\"token operator\">?</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>IntrinsicElements<span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span>\n            <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\"><code class=\"code\">infer</code>で目的の型を抜き出しているのですが難しい定義ですね。</p>\n<p class=\"paragraph\">使用例)</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx pre\"><code class=\"language-tsx code\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Sample</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span> age<span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SampleProps</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ComponentProps</span></span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typeof</span> <span class=\"token maybe-class-name\">Sample</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*</span>\n<span class=\"token comment\">    type SampleProps = {</span>\n<span class=\"token comment\">        name: string;</span>\n<span class=\"token comment\">        age: number;</span>\n<span class=\"token comment\">    }</span>\n<span class=\"token comment\">*/</span>\n</code></pre></div>\n<p class=\"paragraph\">このようにコンポーネントからPropsの型を抜き出すことができました。\n利用しているライブラリで<code class=\"code\">Props</code>が公開されていない場合でも型を抜き出すことができるので重宝します。</p>\n<h4 class=\"heading lv-4\">React.ReactDOM</h4>\n<p class=\"paragraph\">こちらは自作のコンポーネントではなく<code class=\"code\">div</code>や<code class=\"code\">input</code>などのHTML,SVGタグの定義となります。</p>\n<div class=\"has-filename\"><div class=\"filename\">型定義</div><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ReactDOM</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ReactHTML</span><span class=\"token punctuation\">,</span> ReactSVG <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ReactHTML</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token operator\">:</span> DetailedHTMLFactory<span class=\"token operator\">&#x3C;</span>AnchorHTMLAttributes<span class=\"token operator\">&#x3C;</span>HTMLAnchorElement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> HTMLAnchorElement<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    abbr<span class=\"token operator\">:</span> DetailedHTMLFactory<span class=\"token operator\">&#x3C;</span>HTMLAttributes<span class=\"token operator\">&#x3C;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    address<span class=\"token operator\">:</span> DetailedHTMLFactory<span class=\"token operator\">&#x3C;</span>HTMLAttributes<span class=\"token operator\">&#x3C;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ReactSVG</span> <span class=\"token punctuation\">{</span>\n    animate<span class=\"token operator\">:</span> SVGFactory<span class=\"token punctuation\">;</span>\n    circle<span class=\"token operator\">:</span> SVGFactory<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">これを単体で使うことはあまりないのですが<code class=\"code\">ComponentProps</code>と組み合わせると以下のようなことが可能です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx pre\"><code class=\"language-tsx code\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Div</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ReactDOM</span></span><span class=\"token punctuation\">[</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DivProps</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ComponentProps</span></span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Div</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> props<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">DivProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> className<span class=\"token operator\">:</span> <span class=\"token string\">'class-name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n</code></pre></div>\n<p class=\"paragraph\">自作コンポーネントじゃないタグに動的な<code class=\"code\">props</code>を設定したいとき、\n型安全な変数として定義することができます。</p>\n<p class=\"paragraph\">このようなショートハンドの型を定義するともっと使いやすくなりそうです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">DOMProps<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> React<span class=\"token punctuation\">.</span>ReactDOM<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>ComponentProps<span class=\"token operator\">&#x3C;</span>React<span class=\"token punctuation\">.</span>ReactDOM<span class=\"token punctuation\">[</span><span class=\"token constant\">E</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 使う</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DivProps</span> <span class=\"token operator\">=</span> DOMProps<span class=\"token operator\">&#x3C;</span><span class=\"token string\">'div'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n</code></pre></div>\n<h4 class=\"heading lv-4\">追記</h4>\n<p class=\"paragraph\"><code class=\"code\">JSX.IntrinsicElements</code>という型が存在しており\nこれを使うことで上記と同じようなことができます。\nそしてどうやら<code class=\"code\">IntrinsicElements</code>のほうがスタンダードのようです...!</p>\n<h2 class=\"heading lv-2\">まとめ</h2>\n<p class=\"paragraph\">実際にはコンポーネントの型定義が他にもいくつかあって複雑に絡み合っているのですが\n今回はこのあたりのよく目にする部分のみをまとめてみました。(時間がなかった)</p>\n<p class=\"paragraph\">Reactなど関数的な考え方を持ち込んでいるライブラリは型定義が面白かったりと勉強になるので\n皆さんもぜひ読んでみてはいかがでしょうか。</p>\n<hr>\n<p class=\"paragraph\">おしまい</p>"},"__N_SSG":true}