{"pageProps":{"post":"{\"slug\":\"vuex_typesafe_library\",\"title\":\"TypeScriptでVuexを型安全に扱うライブラリを作りました\",\"publishedAt\":\"2018-10-14T01:31:27.000Z\",\"description\":\"vuexをTypeScriptで扱う際に可能な限り型安全にするライブラリを作ったので解説と紹介を行います。\",\"tags\":[\"Vue\",\"TypeScript\"]}","content":"<h2 class=\"heading lv-2\">はじめに</h2>\n<p class=\"paragraph\">こんにちは。\nみなさんVue&#x26;Vuex&#x26;TypeScript やってますか？</p>\n<p class=\"paragraph\">Vueクラススタイルコンポーネント向けのライブラリのなかで\n<a href=\"https://github.com/ktsn/vuex-class\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">vuex-class</a>というライブラリがすごく気に入ったのですが型安全ではありません。\n↑ リポジトリを見るとIssueは立ってるようです</p>\n<p class=\"paragraph\">そこで今回、車輪の再発明を承知でライブラリを作りました！\n<code class=\"code\">vuex-class</code>的な使い心地で型安全なものを目指します:point_up:</p>\n<h2 class=\"heading lv-2\">コード</h2>\n<p class=\"paragraph\">まずは作ったものはこちら\n<a href=\"https://www.npmjs.com/package/vuex-map-decorators\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">vuex-map-decorators</a></p>\n<p class=\"paragraph\">基本的にデコレータを実装しているので、\n実装内容より先に使い方を説明します。</p>\n<h2 class=\"heading lv-2\">使い方</h2>\n<h3 class=\"heading lv-3\">シンプルな使い方</h3>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> State<span class=\"token punctuation\">,</span> Mutation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex-map-decorators'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">SampleState</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">HogeState</span> <span class=\"token punctuation\">{</span>\n  message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">SampleMutation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">increment</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n@Component\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token generic-function\"><span class=\"token function\">State</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span>SampleState<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">)</span>\n  count<span class=\"token operator\">!</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  @<span class=\"token generic-function\"><span class=\"token function\">Mutation</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span>SampleMutation<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span>\n  onClick<span class=\"token operator\">!</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n  @<span class=\"token generic-function\"><span class=\"token function\">State</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span>HogeState<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sample'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 第二引数はnamespace (sample/message)</span>\n  message<span class=\"token operator\">!</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// SampleStateに存在しないキーはコンパイルエラーになる</span>\n  @<span class=\"token generic-function\"><span class=\"token function\">State</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span>SampleState<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#x3C;- Error</span>\n  message<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 class=\"heading lv-4\">解説</h4>\n<p class=\"paragraph\"><code class=\"code\">@State</code>をつけたプロパティへはVuexStoreのstate部分が割り当てられます。\n例では<code class=\"code\">@State</code>と<code class=\"code\">@Mutation</code>のみですが、\n<code class=\"code\">@Getter</code>と<code class=\"code\">@Action</code>も用意しており使い勝手は全て同じです。</p>\n<p class=\"paragraph\">引数|マップされる先\n---|---|---\n@State&#x3C;T>(key: keyof T, namespace?: string | undefined)| computed\n@Mutation&#x3C;T>(key: keyof T, namespace?: string | undefined)| methods\n@Getter&#x3C;T>(key: keyof T, namespace?: string | undefined)| computed\n@Actions&#x3C;T>(key: keyof T, namespace?: string | undefined)| methods</p>\n<p class=\"paragraph\">デコレータの第一引数は<code class=\"code\">&#x3C;T>(keyof T)</code>となっているため、\n型引数<code class=\"code\">&#x3C;T></code>の型に存在しないキーを渡せないようになっています。</p>\n<p class=\"paragraph\">デコレータをつけるプロパティの型については、\nこのままだと任意になってしまい微妙なので対応したいところですね。\n内容がライブラリと少し離れてしまうため別の記事にしたいと思います。</p>\n<h3 class=\"heading lv-3\">Namespaceを意識した使い方</h3>\n<p class=\"paragraph\">前述した内容では確かに型安全になりますが、あまりにも記述する内容が多すぎます。\nそこでNamespaceを意識した方法を用意していますので紹介します。(むしろこっちがメイン</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">namespace</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex-map-decorators'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">SampleState</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> state<span class=\"token operator\">:</span> SampleState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mutations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> getters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ns <span class=\"token operator\">=</span> <span class=\"token keyword\">namespace</span><span class=\"token operator\">&#x3C;</span>\n  SampleState<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">typeof</span> mutations<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">typeof</span> getters<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">typeof</span> action<span class=\"token punctuation\">,</span>\n<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'sample'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n@Component\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n  @ns<span class=\"token punctuation\">.</span><span class=\"token function\">State</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token operator\">!</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ↓ これと同じ意味になります</span>\n@<span class=\"token generic-function\"><span class=\"token function\">State</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span>SampleState<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sample'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h4 class=\"heading lv-4\">解説</h4>\n<p class=\"paragraph\"><code class=\"code\">namespace</code>関数に<code class=\"code\">state</code>, <code class=\"code\">mutaions</code>, <code class=\"code\">getters</code>, <code class=\"code\">actions</code>の順で型を渡して、\n引数には名前空間を文字列で渡します。</p>\n<p class=\"paragraph\">もし「<code class=\"code\">getters</code>はないんだよね」って時は、型に<code class=\"code\">never</code>を渡してあげてください</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">const</span> ns <span class=\"token operator\">=</span> <span class=\"token keyword\">namespace</span><span class=\"token operator\">&#x3C;</span>\n  SampleState<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">typeof</span> mutations<span class=\"token punctuation\">,</span>\n  <span class=\"token builtin\">never</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 実装していない部分はneverで</span>\n  <span class=\"token keyword\">typeof</span> action<span class=\"token punctuation\">,</span>\n<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'sample'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nns<span class=\"token punctuation\">.</span>Getter <span class=\"token comment\">// &#x3C;- ここではエラーになる</span>\n</code></pre></div>\n<p class=\"paragraph\">型に<code class=\"code\">never</code>を渡すことで、返却されるオブジェクトの型が変わり、\n参照そのものができなくなります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">const</span> ns1 <span class=\"token operator\">=</span> <span class=\"token keyword\">namespace</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'sample'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*</span>\n<span class=\"token comment\">  ns1 = {</span>\n<span class=\"token comment\">    State(k: keyof A){},</span>\n<span class=\"token comment\">    Mutation(k: keyof B){},</span>\n<span class=\"token comment\">    Getter(k: keyof C){},</span>\n<span class=\"token comment\">    Action(k: keyof D){},</span>\n<span class=\"token comment\">  }</span>\n<span class=\"token comment\">*/</span>\n\n<span class=\"token keyword\">const</span> ns2 <span class=\"token operator\">=</span> <span class=\"token keyword\">namespace</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'sample'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*</span>\n<span class=\"token comment\">  ns2 = {</span>\n<span class=\"token comment\">    State(k: keyof A){},</span>\n<span class=\"token comment\">    Action(k: keyof D){},</span>\n<span class=\"token comment\">  }</span>\n<span class=\"token comment\">*/</span>\n</code></pre></div>\n<h4 class=\"heading lv-4\">従来のVuexコンテキストを利用する場合</h4>\n<p class=\"paragraph\">デコレータを使わず<code class=\"code\">commit</code>や<code class=\"code\">dispatch</code>を利用する場合です。\nやはりどうしてもデコレータだけだと辛いこともあるかもしれないので、\n以下のような手段を用意しました</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Mutations</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">increment</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> ns <span class=\"token operator\">=</span> <span class=\"token keyword\">namespace</span><span class=\"token operator\">&#x3C;</span>State<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'views/sample'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> ns<span class=\"token punctuation\">.</span><span class=\"token function\">Mutation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span> <span class=\"token comment\">// views/sample/increment</span>\n$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">少し野暮ったいですが、文字リテラルでも型に守られるため\nこの手段を使うこともありかと思います。\nただし、Payloadの型までは現時点で推論できないため今後の課題です。</p>\n<h3 class=\"heading lv-3\">実装内容</h3>\n<p class=\"paragraph\">実装は１ファイルです。\nまずはデコレータを作成するところをみてみます</p>\n<h4 class=\"heading lv-4\">デコレータ作成部分</h4>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">function</span> <span class=\"token function\">createVuexDecorator</span><span class=\"token punctuation\">(</span>\n  bindTo<span class=\"token operator\">:</span> <span class=\"token string\">'computed'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'methods'</span><span class=\"token punctuation\">,</span>\n  mapper<span class=\"token operator\">:</span> VuexMapper<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> namesapce<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> VuexDecorator <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">key is not string: key=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, ns=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>namesapce<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> dec <span class=\"token operator\">=</span> <span class=\"token function\">createDecorator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>target<span class=\"token punctuation\">[</span>bindTo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        target<span class=\"token punctuation\">[</span>bindTo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      target<span class=\"token punctuation\">[</span>bindTo<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        namesapce <span class=\"token operator\">?</span> <span class=\"token function\">mapper</span><span class=\"token punctuation\">(</span>namesapce<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">mapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> VuexDecorator<span class=\"token punctuation\">;</span>\n    dec<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> namesapce <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>namesapce<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> key<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> dec<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> State <span class=\"token operator\">=</span> <span class=\"token function\">createVuexDecorator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'computed'</span><span class=\"token punctuation\">,</span> mapState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Mutation <span class=\"token operator\">=</span> <span class=\"token function\">createVuexDecorator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'methods'</span><span class=\"token punctuation\">,</span> mapMutations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Getter <span class=\"token operator\">=</span> <span class=\"token function\">createVuexDecorator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'computed'</span><span class=\"token punctuation\">,</span> mapGetters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Action <span class=\"token operator\">=</span> <span class=\"token function\">createVuexDecorator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'methods'</span><span class=\"token punctuation\">,</span> mapActions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\"><code class=\"code\">createVuexDecorator</code>を呼ぶことでそれぞれのデコレータを作成しています。</p>\n<h5 class=\"heading lv-5\">引数</h5>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">VuexMapper</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">|</span> <span class=\"token keyword\">typeof</span> mapState\n  <span class=\"token operator\">|</span> <span class=\"token keyword\">typeof</span> mapMutations\n  <span class=\"token operator\">|</span> <span class=\"token keyword\">typeof</span> mapGetters\n  <span class=\"token operator\">|</span> <span class=\"token keyword\">typeof</span> mapActions\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createVuexDecorator</span><span class=\"token punctuation\">(</span>\n  bindTo<span class=\"token operator\">:</span> <span class=\"token string\">'computed'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'methods'</span><span class=\"token punctuation\">,</span>\n  mapper<span class=\"token operator\">:</span> VuexMapper<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p class=\"paragraph\">どこに何でマッピングするかを定義します。\n<code class=\"code\">State</code>の場合は「computedにmapState」でマッピングを行なっています。\n<code class=\"code\">VuexMapper</code>はvuex標準の<code class=\"code\">mapXXXX</code>のどれかです。</p>\n<h5 class=\"heading lv-5\">デコレータの実装部分</h5>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createDecorator<span class=\"token punctuation\">,</span> VueDecorator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-class-component'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">VuexDecorator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">VueDecorator</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*</span>\n<span class=\"token comment\">  中略</span>\n<span class=\"token comment\">*/</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> namesapce<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> VuexDecorator <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 入力チェックは省略</span>\n    <span class=\"token keyword\">const</span> dec <span class=\"token operator\">=</span> <span class=\"token function\">createDecorator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>target<span class=\"token punctuation\">[</span>bindTo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        target<span class=\"token punctuation\">[</span>bindTo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      target<span class=\"token punctuation\">[</span>bindTo<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        namesapce <span class=\"token operator\">?</span> <span class=\"token function\">mapper</span><span class=\"token punctuation\">(</span>namesapce<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">mapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> VuexDecorator<span class=\"token punctuation\">;</span>\n    dec<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> namesapce <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>namesapce<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> key<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> dec<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h5 class=\"heading lv-5\">戻り値</h5>\n<p class=\"paragraph\">Vue公式の<code class=\"code\">vue-class-component</code>内の<code class=\"code\">VueDecorator</code>を拡張しており、\n<strong>従来のVuexコンテキストを利用する場合</strong>内で説明した<code class=\"code\">key</code>を追加しています。</p>\n<h5 class=\"heading lv-5\">本体</h5>\n<p class=\"paragraph\">まずは受け取った型から引数を絞ります。\nここではVue公式の<code class=\"code\">createDecorator</code>を利用することで実装がとてもシンプルになります。</p>\n<p class=\"paragraph\"><code class=\"code\">target</code>はコンポーネントで、<code class=\"code\">prop</code>はデコレータがついていたプロパティになり、\n<code class=\"code\">target['computed' | 'methods']</code>へ <code class=\"code\">mapXXXX</code>の結果を突っ込んでいく形で実装しています。</p>\n<h4 class=\"heading lv-4\">名前空間作成部分</h4>\n<p class=\"paragraph\">この戻りの型定義が一番面白いところです！\nそしてなくても困らない部分です...:smile:</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">namespace</span><span class=\"token operator\">&#x3C;</span>\n  <span class=\"token constant\">S</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">M</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">G</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DecoratorInterface<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">G</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">State</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token generic-function\"><span class=\"token function\">State</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">Mutation</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token generic-function\"><span class=\"token function\">Mutation</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">M</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">Getter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">G</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token generic-function\"><span class=\"token function\">Getter</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">G</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">Action</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token generic-function\"><span class=\"token function\">Action</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">見ての通り、先ほど作成したデコレータにnamespaceを渡し、オブジェクトに固めているだけです。\nこの際にデコレータの引数で名前空間を受け取れなくしています。</p>\n<p class=\"paragraph\">ここで戻り値の型となっている<code class=\"code\">DecoratorInterface</code>の説明を行いましょう！</p>\n<h5 class=\"heading lv-5\">名前空間オブジェクトの型</h5>\n<p class=\"paragraph\">型定義は以下のようになっています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">IsNever<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">N</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">never</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token string\">'T'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">IfNotNever<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">T</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">F</span><span class=\"token operator\">:</span> <span class=\"token constant\">R</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>IsNever<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DecoratorMaker<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> VuexDecorator<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DecoratorInterface<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">G</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&#x26;</span> IfNotNever<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> State<span class=\"token operator\">:</span> DecoratorMaker<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&#x26;</span> IfNotNever<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">M</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Mutation<span class=\"token operator\">:</span> DecoratorMaker<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">M</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&#x26;</span> IfNotNever<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">G</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Getter<span class=\"token operator\">:</span> DecoratorMaker<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">G</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&#x26;</span> IfNotNever<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Action<span class=\"token operator\">:</span> DecoratorMaker<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">はい出ました。TypeScript型遊びの時間です。</p>\n<h6>IsNever&#x3C;N></h6>\n<p class=\"paragraph\">NがNeverかどうかを判定し,\nNがNeverの場合は<code class=\"code\">'T'</code>、違う場合は<code class=\"code\">'F'</code>を返却します。\nちなみにここでいう<code class=\"code\">'T'</code>は値ではなく<code class=\"code\">'T'</code>という型です。</p>\n<p class=\"paragraph\">ここで<code class=\"code\">[never]</code>のように配列にしなかった場合、うまくいきませんでした。\nハマったので調べてみるとTypeScript本家のIssueに書いてあってのでなんとか解決。\n<a href=\"https://github.com/Microsoft/TypeScript/issues/23182\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/Microsoft/TypeScript/issues/23182</a></p>\n<h6>IfNotNever&#x3C;T, R></h6>\n<p class=\"paragraph\">先ほど定義した<code class=\"code\">IsNever</code>を利用します。\nもし<code class=\"code\">T</code>がneverだった場合は空オブジェクトを、違う場合は<code class=\"code\">R</code>を返却します。\nこうすることで、neverじゃない場合のみ、プロパティが参照できるようになります。</p>\n<h2 class=\"heading lv-2\">あとがき</h2>\n<p class=\"paragraph\">自分で作ったので当然ですが、\nなかなか使い勝手がいい感じに仕上がりました。</p>\n<p class=\"paragraph\">実際に使い込んでみて都合が悪いことがあれば都度直していきたいと思います。</p>\n<p class=\"paragraph\">やっぱりTypeScriptの型でモニョモニョするのは楽しいですね:relaxed:</p>\n<p class=\"paragraph\">おしまい</p>"},"__N_SSG":true}