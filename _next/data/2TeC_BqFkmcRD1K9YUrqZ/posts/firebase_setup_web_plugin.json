{"pageProps":{"post":"{\"slug\":\"firebase_setup_web_plugin\",\"title\":\"FirebaseのWebプロジェクトをビルドしやすくするモジュールを作った\",\"publishedAt\":\"2019-03-13T22:34:57.000Z\",\"description\":\"firebase setup:webを同期的にnode.jsから呼び出しやすくするためのライブラリを作ったので解説します。\",\"tags\":[\"Firebase\",\"JavaScript\"]}","content":"<h2 class=\"heading lv-2\">注意</h2>\n<p class=\"paragraph\">2020/11/12現在このライブラリは動作しないです。\nそのうち更新しますがご注意ください</p>\n<h2 class=\"heading lv-2\">はじめに</h2>\n<p class=\"paragraph\">FirebaseでWebプロジェクトを作る際に\n<code class=\"code\">API_KEY</code>などをGitでどう管理するか悩んだ結果、\n管理しなくて済むようにビルド時に解決するモジュールを作ったので紹介します。</p>\n<h2 class=\"heading lv-2\">成果物</h2>\n<p class=\"paragraph\">とりあえず成果物を見たい方はこちらをどうぞ</p>\n<p class=\"paragraph\"><a href=\"https://github.com/taqm/firebase-setup-web\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub</a>\n<a href=\"https://www.npmjs.com/package/firebase-setup-web\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">npm</a></p>\n<h2 class=\"heading lv-2\">背景</h2>\n<p class=\"paragraph\">最近よく目にする<code class=\"code\">Firebase</code>ですが、\nWebプロジェクトでは初期化のため以下のような記述が必要です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript pre\"><code class=\"language-javascript code\"><span class=\"token keyword\">const</span> firebase <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firebase\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  apiKey<span class=\"token operator\">:</span> <span class=\"token string\">\"XXXXX\"</span><span class=\"token punctuation\">,</span>\n  authDomain<span class=\"token operator\">:</span> <span class=\"token string\">\"XXXXX.firebaseapp.com\"</span><span class=\"token punctuation\">,</span>\n  databaseURL<span class=\"token operator\">:</span> <span class=\"token string\">\"https://XXXXX.firebaseio.com\"</span><span class=\"token punctuation\">,</span>\n  projectId<span class=\"token operator\">:</span> <span class=\"token string\">\"XXXXX\"</span><span class=\"token punctuation\">,</span>\n  storageBucket<span class=\"token operator\">:</span> <span class=\"token string\">\"XXXXX.appspot.com\"</span><span class=\"token punctuation\">,</span>\n  messagingSenderId<span class=\"token operator\">:</span> <span class=\"token string\">\"XXXXX\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nfirebase<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">initializeApp</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">（↑ 公式のサンプルを少しいじったもの</p>\n<p class=\"paragraph\">こういうチュートリアル的な記述って\nキーとかが文字リテラルでべた書きされていることが多いのですが\n「Gitでどう管理するんだ？」ってなりますよね :rolling_eyes:</p>\n<h2 class=\"heading lv-2\">管理方法</h2>\n<h3 class=\"heading lv-3\">ベタ書きのまま</h3>\n<p class=\"paragraph\">別に見られて困るものでもないのでそれでもいいと思います。\nさらにプライベートリポジトリならまず問題ないでしょう。</p>\n<p class=\"paragraph\">でも定数がソースコードにベタ書きなのは、\n精神衛生上は良くないのでこれは採用したくないです。</p>\n<p class=\"paragraph\">（あと開発が１環境で済むはずがないですし</p>\n<h3 class=\"heading lv-3\">ビルド時に環境変数から取得</h3>\n<p class=\"paragraph\">大体の場合は環境変数に突っ込むことが選択肢の上位になりますよね。</p>\n<p class=\"paragraph\"><code class=\"code\">webpack.config.js</code>や<code class=\"code\">nuxt.config.js</code>、<code class=\"code\">gulpfile.js</code>など\nビルド設定スクリプトで環境変数を参照することで解決します。</p>\n<p class=\"paragraph\">そしてローカル環境で環境変数の設定は面倒なので\n<code class=\"code\">dotenv</code>や<code class=\"code\">env-cmd</code>を使うことになると思います。</p>\n<p class=\"paragraph\">割といい感じかと思いましたが、\nボクは値そのものを管理したくないし見たくもないのです。</p>\n<p class=\"paragraph\"><strong>ちなみに</strong>\nこの<code class=\"code\">.env</code>ファイルや↑のベタ書きファイルを\nGitHubのパブリックリポジトリに突っ込むとGitHubさんから連絡がきます。</p>\n<h3 class=\"heading lv-3\">firebase-toolsを使って動的に取得</h3>\n<p class=\"paragraph\">firebaseのcliとしてインストールする <code class=\"code\">firebase-tools</code>。\nこちらを使うことで現在有効になっているfirebaseプロジェクトの設定が取得できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript pre\"><code class=\"language-javascript code\"><span class=\"token keyword\">const</span> firebaseTools <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'firebase-tools'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfirebaseTools<span class=\"token punctuation\">.</span><span class=\"token property-access\">setup</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">web</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ここで設定から処理を行える</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">かなりいい感じです！\nただし困った点が...</p>\n<p class=\"paragraph\">この機能は非同期な処理なので、\n同期的な処理の中に組み込みづらいんですよね :frowning2:</p>\n<h2 class=\"heading lv-2\">作りました</h2>\n<p class=\"paragraph\">結局どれもしっくり来なかったので\n↓この２つを要件として作りました</p>\n<ul class=\"list unordered\">\n<li>同期的にJSONが取得できる</li>\n<li>このために別モジュールを必要としない（なにかに依存しない）</li>\n</ul>\n<h3 class=\"heading lv-3\">使い方</h3>\n<p class=\"paragraph\">このモジュールは対象のプロジェクトで\n<code class=\"code\">firebase setup:web</code>コマンドが実行できることが前提です！\nfirebaseの開発者はみんな実行できますよね...?</p>\n<p class=\"paragraph\">今回作成した<code class=\"code\">firebase-setup-web</code>を読み込むことで\n同期的に設定を読み込みJSONで扱えるようにしてくれます。\nWebpackで利用する場合を例として紹介します。</p>\n<p class=\"paragraph\">■ <code class=\"code\">Webpack.DefinePlugin</code>で使う場合</p>\n<div class=\"has-filename\"><div class=\"filename\">webpack.config.js</div><pre class=\"language-javascript pre\"><code class=\"language-javascript code\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'firebase-setup-web'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> defParams <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'process.env.FB_PROJECT_ID'</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token property-access\">projectId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// webpack config</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span>defParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">↑のように設定情報を変換したい文字列として登録してあげます。</p>\n<p class=\"paragraph\">読み込むだけで設定オブジェクトが取得できるので、自由にビルドの設定を行いましょう。\nもちろんただのスクリプトなので<code class=\"code\">nuxt.config.js</code>などでも使えます:ok_hand:</p>\n<h3 class=\"heading lv-3\">CIの中で使う</h3>\n<p class=\"paragraph\">CIで利用する場合には\n<code class=\"code\">firebase login:ci</code>というコマンドで取得できるトークンを利用します。\nビルド時に環境変数<code class=\"code\">FB_CI_TOKEN</code>へ上記コマンドの結果を設定してください。</p>\n<p class=\"paragraph\">環境変数が存在すればそのトークンからプロジェクト情報を取得します。</p>\n<h3 class=\"heading lv-3\">型定義</h3>\n<p class=\"paragraph\">ちゃんと<code class=\"code\">index.d.ts</code>も用意したのでTypeScriptでも扱いやすいです！</p>\n<h3 class=\"heading lv-3\">実装の解説</h3>\n<p class=\"paragraph\"><code class=\"code\">firebase</code>コマンドの中に<code class=\"code\">setup:web</code>というサブコマンドがあり、\nこれを実行することで現在有効なプロジェクト設定を取得することができます。\n（前述した<strong>firebase-toolsを使って動的に取得</strong>と内部的には同じ処理が動くようです。</p>\n<p class=\"paragraph\">早速実行!</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash pre\"><code class=\"language-bash code\">$ firebase setup:web\n\n// Copy and <span class=\"token function\">paste</span> this into your JavaScript code to initialize the Firebase SDK.\n// You will also need to load the Firebase SDK.\n// See https://firebase.google.com/docs/web/setup <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> details.\n\nfirebase.initializeApp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"apiKey\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"XXXXX\"</span>,\n  <span class=\"token string\">\"authDomain\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"XXXXX.firebaseapp.com\"</span>,\n  <span class=\"token string\">\"databaseURL\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://XXXXX.firebaseio.com\"</span>,\n  <span class=\"token string\">\"projectId\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"XXXXX\"</span>,\n  <span class=\"token string\">\"storageBucket\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"XXXXX.appspot.com\"</span>,\n  <span class=\"token string\">\"messagingSenderId\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"XXXXX\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">うぐっ！！！\nなんと使いづらい....</p>\n<p class=\"paragraph\">すごく親切で「これをコピペしてね！」って言ってますが、\n今回欲しいのは中のJSONだけなのです。</p>\n<h4 class=\"heading lv-4\">コマンドの結果をパース</h4>\n<p class=\"paragraph\">最終的なビルドはJavaScriptで書くので、パース処理もJavaScriptで記述します。\nコマンドは<code class=\"code\">child_process</code>を使って実行！</p>\n<div class=\"has-filename\"><div class=\"filename\">index.js</div><pre class=\"language-javascript pre\"><code class=\"language-javascript code\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> execSync <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> firebase <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">initializeApp</span><span class=\"token operator\">:</span> <span class=\"token parameter\">c</span> <span class=\"token arrow operator\">=></span> c<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">CMD</span> <span class=\"token operator\">=</span> <span class=\"token string\">'firebase setup:web'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CMD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fnc <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Buffer</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>fnc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eslint-disable-line no-eval</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">せっかくGoogleさんが親切に実行できる形で出力してくれているので、\n<code class=\"code\">firebase.initializeApp</code>を実際に用意して実行してあげましょう。</p>\n<p class=\"paragraph\"><code class=\"code\">initializeApp</code>には設定オブジェクトが渡ってくるのでそのまま返却します。\nそしてエクスポート。</p>\n<p class=\"paragraph\">これでこのモジュールを読み込むとfirebaseの設定が取得できます :relaxed:</p>\n<h2 class=\"heading lv-2\">課題</h2>\n<p class=\"paragraph\">１つのアプリで複数のFirebaseプロジェクトを扱う場合には\nこのモジュールを使うことはできません。\nどれくらい需要がある機能なのかも不明なためとりあえずそのままで。</p>\n<h2 class=\"heading lv-2\">まとめ</h2>\n<p class=\"paragraph\">実装は１ファイルで依存もなし。これだけ聞くとかなり優秀なモジュールが完成しました。</p>\n<p class=\"paragraph\">ただコマンド叩いていたり、evalを使ったりとあまりよくない実装ですが\nビルド用のスクリプトなので目をつむっていただけると...（汗</p>\n<p class=\"paragraph\">あまり類似ツールが存在するかは調べていないので\n他に良いツールがあったりする場合は教えていただけると嬉しいです！</p>\n<hr>\n<p class=\"paragraph\">おしまい</p>"},"__N_SSG":true}