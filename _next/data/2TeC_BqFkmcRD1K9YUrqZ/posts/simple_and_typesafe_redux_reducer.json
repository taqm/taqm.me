{"pageProps":{"post":"{\"slug\":\"simple_and_typesafe_redux_reducer\",\"title\":\"TypeScriptで Redux の Reducer部分を型安全かつスッキリ書く\",\"publishedAt\":\"2018-05-08T06:17:14.000Z\",\"description\":\"TypeScriptのConditional Typesを利用してReduxの定義を完結に記述する解説です。\",\"tags\":[\"Redux\",\"TypeScript\"]}","content":"<h2 class=\"heading lv-2\">はじめに</h2>\n<p class=\"paragraph\">TypeScript 2.8がリリースされ色々な機能が追加されました。\nその中でも<em>Conditional types</em>、特に<em>ReturnType</em>がなかなか優秀で\n今まで諦めていた部分がきれいに書けるようになっております。</p>\n<p class=\"paragraph\">そこで個人的にずさんになりがちな、ReduxのReducer周りを少し改良してみたのでご紹介</p>\n<h2 class=\"heading lv-2\">コード</h2>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">const</span> <span class=\"token constant\">INCREMENT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'app/example/INCREMENT'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">SET_COUNT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'app/example/SET_COUNT'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">INCREMENT</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">SET_COUNT</span><span class=\"token punctuation\">,</span>\n  payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token operator\">:</span> num<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Actions</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">|</span> ReturnType<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typeof</span> increment<span class=\"token operator\">></span>\n  <span class=\"token operator\">|</span> ReturnType<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typeof</span> setCount<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">AppState</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 本記事の趣旨に関係ないため割愛</span>\n<span class=\"token keyword\">const</span> initialState<span class=\"token operator\">:</span> AppState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>\n  state<span class=\"token operator\">:</span> AppState <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span>\n  action<span class=\"token operator\">:</span> Actions<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">INCREMENT</span><span class=\"token operator\">:</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// ↑ SET_COUNT以外でpayloadを参照するとエラーになる</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">SET_COUNT</span><span class=\"token operator\">:</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// ↑ OK</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">const</span> _<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// ↑ ケースの定義もれがあった場合にエラーになる</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">下で要点を解説していきます\nまた、今回は型をテーマにしていますので、\nReducerの処理自体は空っぽにしております</p>\n<h4 class=\"heading lv-4\">ReturnTypeの利用</h4>\n<p class=\"paragraph\">TypeScript2.8の機能であるReturnTypeを利用することで、\nActionCreator関数の戻り値からActionの型を特定することができるようになりました。\nこうすることでAction型定義の管理が少しだけ楽になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Actions</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">|</span> ReturnType<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typeof</span> increment<span class=\"token operator\">></span>\n  <span class=\"token operator\">|</span> ReturnType<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typeof</span> setCount<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ↓ こう解釈される</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Actions</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"app/example/INCREMENT\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"app/example/SET_COUNT\"</span><span class=\"token punctuation\">;</span>\n    payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">TypeScript3.4で導入された <code class=\"code\">const assertion</code> を利用することで各定数が<code class=\"code\">string</code>ではなく、\nその文字列の型として定義されるため↑のようにtypeが各アクションとして認識されます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">const</span> <span class=\"token constant\">INCREMENT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'app/example/INCREMENT'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">SET_COUNT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'app/example/SET_COUNT'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 class=\"heading lv-4\">defaultの部分</h4>\n<p class=\"paragraph\"><code class=\"code\">default</code>部分の<code class=\"code\">never</code>型への代入については<a href=\"https://qiita.com/wadahiro/items/9ec4af968a7314402499#_reference-ea5a7c38d951fc383cd3\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">TypeScript 2.0のneverでTagged union typesの絞込を漏れ無くチェックする</a> の記事で紹介されている素敵なテクニックです。</p>\n<h2 class=\"heading lv-2\">最後に</h2>\n<p class=\"paragraph\">TypeScriptではanyを多用すればエラーを黙らせることはできますが\nいかにして型安全に設計・実装できるかを考えるのが楽しいですよね。</p>\n<p class=\"paragraph\">実はもっといい方法があるのではないかと\nうずうずしていますので、いい案があればぜひ教えていただきたいです。</p>\n<h2 class=\"heading lv-2\">参考記事</h2>\n<p class=\"paragraph\">色々参考にさせていただきました。</p>\n<ul class=\"list unordered\">\n<li><a href=\"https://qiita.com/wadahiro/items/7c421b668f28a99e2a29\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">Redux typed actions でReducerを型安全に書く (TypeScriptのバージョン別)</a></li>\n<li><a href=\"https://qiita.com/wadahiro/items/9ec4af968a7314402499#_reference-ea5a7c38d951fc383cd3\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">TypeScript 2.0のneverでTagged union typesの絞込を漏れ無くチェックする</a></li>\n<li>[真・Flow &#x26; Redux で Reducer の実装パターンを考える</li>\n</ul>\n<p class=\"paragraph\">](<a href=\"https://qiita.com/mizchi/items/0e2db7c56541c46a7785\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">https://qiita.com/mizchi/items/0e2db7c56541c46a7785</a>)</p>"},"__N_SSG":true}