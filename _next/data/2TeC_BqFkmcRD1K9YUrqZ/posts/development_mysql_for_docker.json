{"pageProps":{"post":"{\"slug\":\"development_mysql_for_docker\",\"title\":\"Docker(Compose)を使ったローカル開発用MySQLの準備\",\"publishedAt\":\"2018-09-10T00:45:48.000Z\",\"description\":\"ローカル開発環境で手軽にDocker&MySQLを起動するためのtipsです。\",\"tags\":[\"MySQL\",\"Docker\"]}","content":"<p class=\"paragraph\">忘れないようにメモ</p>\n<p class=\"paragraph\">あくまでローカル開発用のコンテナ作成を目的としており、\n本番環境や、永続化するような環境へ適応する場合には色々と他の手順が必要ですのでご注意ください。</p>\n<p class=\"paragraph\">基本的にオフィシャルページに書いてあることしかやってません！\n<a href=\"https://hub.docker.com/_/mysql/\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">公式ページ</a></p>\n<h3 class=\"heading lv-3\">ディレクトリ構成</h3>\n<p class=\"paragraph\">とりあえず↓のような構成で進めていきます</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown pre\"><code class=\"language-unknown code\">.\n├── docker-compose.yml\n├── docker-entrypoint-initdb.d\n│   ├── 01_create_tables.sql\n│   └── 02_test_user.sql\n└── my.cnf</code></pre></div>\n<p class=\"paragraph\">後述しますが<code class=\"code\">docker-entrypoint-initdb.d</code>配下には構築時に実行したいものを配置します。</p>\n<h3 class=\"heading lv-3\">docker-compose.ymlの中身</h3>\n<p class=\"paragraph\">まずは内容を先に紹介</p>\n<div class=\"remark-highlight\"><pre class=\"language-yaml pre\"><code class=\"language-yaml code\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span>タグ\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3306:3306\"</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">MYSQL_DATABASE</span><span class=\"token punctuation\">:</span> database_name\n      <span class=\"token key atrule\">MYSQL_USER</span><span class=\"token punctuation\">:</span> user_name\n      <span class=\"token key atrule\">MYSQL_PASSWORD</span><span class=\"token punctuation\">:</span> password\n      <span class=\"token key atrule\">MYSQL_ALLOW_EMPTY_PASSWORD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"yes\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./docker<span class=\"token punctuation\">-</span>entrypoint<span class=\"token punctuation\">-</span>initdb.d<span class=\"token punctuation\">:</span>/docker<span class=\"token punctuation\">-</span>entrypoint<span class=\"token punctuation\">-</span>initdb.d\n      <span class=\"token punctuation\">-</span> ./my.cnf<span class=\"token punctuation\">:</span>/etc/mysql/conf.d/my.cnf\n</code></pre></div>\n<p class=\"paragraph\">要点だけ簡単に説明してきます</p>\n<h4 class=\"heading lv-4\">environment</h4>\n<p class=\"paragraph\">環境変数です。\nせっかくなので公式ページに載っているものすべてを説明します。</p>\n<table class=\"table\">\n<thead class=\"thead\">\n<tr class=\"tr\">\n<th class=\"th\">変数名</th>\n<th class=\"th\">説明</th>\n</tr>\n</thead>\n<tbody class=\"tbody\">\n<tr class=\"tr\">\n<td class=\"td\">MYSQL_ROOT_PASSWORD</td>\n<td class=\"td\">この変数の設定は<strong>必須</strong>です!名前の通りROOTユーザのパスワードになります。</td>\n</tr>\n<tr class=\"tr\">\n<td class=\"td\">MYSQL_DATABASE</td>\n<td class=\"td\">起動時に作成されるDBの名前です。</td>\n</tr>\n<tr class=\"tr\">\n<td class=\"td\">MYSQL_USER</td>\n<td class=\"td\">起動時に新しいユーザを作成します。ここで作成したユーザには[MYSQL_DATABASE] で指定したDBへの<strong>GRANT ALL</strong> 権限が付与されます。</td>\n</tr>\n<tr class=\"tr\">\n<td class=\"td\">MYSQL_PASSWORD</td>\n<td class=\"td\">上記の[MYSQL_USER] で作成したユーザのパスワードです。ユーザを作成する場合にはこちらが必須になります。</td>\n</tr>\n<tr class=\"tr\">\n<td class=\"td\">MYSQL_ALLOW_EMPTY_PASSWORD</td>\n<td class=\"td\">[MYSQL_ROOT_PASSWORD] に空を設定できる用にするフラグです。<code class=\"code\">\"yes\"</code>を設定することで空を設定することが可能になります。ただし、よくわからないならおすすめしない設定です。</td>\n</tr>\n<tr class=\"tr\">\n<td class=\"td\">MYSQL_RANDOM_ROOT_PASSWORD</td>\n<td class=\"td\"><code class=\"code\">\"yes\"</code>を設定することでランダムなパスワードが発行されます。起動時の標準出力へ<code class=\"code\">GENERATED ROOT PASSWORD:  xxxxxxx</code>と出力されますが、正直ローカル開発用ならこのオプションを使うことはないと思います。</td>\n</tr>\n<tr class=\"tr\">\n<td class=\"td\">MYSQL_ONETIME_PASSWORD</td>\n<td class=\"td\">rootユーザのパスワード一度で期限切れにしてくれるらしいです。試してみたのですが、何故かうまく行かなかったので動作確認はできていません・・・</td>\n</tr>\n</tbody>\n</table>\n<p class=\"paragraph\">これらを踏まえてもう一度見てみると</p>\n<div class=\"remark-highlight\"><pre class=\"language-yaml pre\"><code class=\"language-yaml code\"><span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">MYSQL_DATABASE</span><span class=\"token punctuation\">:</span> database_name\n      <span class=\"token key atrule\">MYSQL_USER</span><span class=\"token punctuation\">:</span> user_name\n      <span class=\"token key atrule\">MYSQL_PASSWORD</span><span class=\"token punctuation\">:</span> password\n      <span class=\"token key atrule\">MYSQL_ALLOW_EMPTY_PASSWORD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"yes\"</span>\n</code></pre></div>\n<p class=\"paragraph\">本当に必要最小限の設定ですね＾＾</p>\n<h4 class=\"heading lv-4\">volumes</h4>\n<p class=\"paragraph\">マウントするボリュームです。</p>\n<h5 class=\"heading lv-5\">docker-entrypoint-initdb.d</h5>\n<p class=\"paragraph\">mysqlのイメージは<code class=\"code\">/docker-entrypoint-initdb.d</code>配下のファイルを実行してくれます。\nそのパスにマウントすることで、ローカルにあるSQLを実行してもらう作戦です。</p>\n<p class=\"paragraph\">実行してくれるのは  <code class=\"code\">.sh</code>, <code class=\"code\">.sql</code>, <code class=\"code\">.sql.gz</code> とのこと。\nまた、実行の順番はアルファベット順とのことなので、\nファイル名の先頭に01_,02_などをつけて実行順を制御してあげると良さそうです。</p>\n<p class=\"paragraph\">そしてこのSQLは環境変数「MYSQL_DATABASE」へ設定したDBで実行されます。</p>\n<h5 class=\"heading lv-5\">my.cof</h5>\n<p class=\"paragraph\">MySQLでマルチバイト文字を扱う場合に設定するものです。\n詳しい内容は<a href=\"https://qiita.com/luccafort/items/0553c589dcc6459746bc\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">こちら</a>を参考にしてください!</p>\n<p class=\"paragraph\">ちなみに中身はこんなんです↓</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown pre\"><code class=\"language-unknown code\">[mysqld]\ncharacter-set-server=utf8\ncollation-server=utf8_general_ci\n\n[client]\ndefault-character-set=utf8</code></pre></div>\n<h3 class=\"heading lv-3\">そして実行</h3>\n<div class=\"remark-highlight\"><pre class=\"language-bash pre\"><code class=\"language-bash code\"><span class=\"token comment\"># 起動</span>\n$ docker-compose up -d <span class=\"token comment\"># 起動</span>\n\n<span class=\"token comment\"># rootユーザで接続</span>\n$ docker-compose <span class=\"token builtin class-name\">exec</span> db mysql\n\n<span class=\"token comment\"># 作成したユーザでログインする場合は↓</span>\n<span class=\"token comment\"># docker-compose exec db mysql -u user_name -p</span>\n\n</code></pre></div>\n<p class=\"paragraph\">これでmysqlへ接続できるはずです！\n２つめのコマンドは、「dbコンテナで<code class=\"code\">mysql</code>コマンドを実行する」ということになります。\nこの設定ではrootパスワードを設定していないので<code class=\"code\">mysql</code>だけでも接続できています。</p>\n<p class=\"paragraph\">ちなみに<code class=\"code\">mysql</code>の部分を<code class=\"code\">bash</code>にすることで、\nbash起動も可能ですのでそこは目的に応じて使い分けてください。</p>\n<h2 class=\"heading lv-2\">注意</h2>\n<p class=\"paragraph\">もしローカルDBのデータも永続化したい！って場合だと、\nこのままではコンテナを作り直すとデータが吹っ飛んでしまうので、<code class=\"code\">/var/lib/mysql</code>をマウントしてあげるなどの必要があります。\nただし、今の構成は最初にSQLが流れてしまうので色々な<strong>調整が必要です</strong>・・・</p>\n<h2 class=\"heading lv-2\">感想</h2>\n<p class=\"paragraph\">実際はクライアントツールの設定も同時に行うことになると思いますが、\n最小構成としてはこの様になると思います。</p>\n<p class=\"paragraph\">思った以上にシンプルな設定で済んだので積極的に利用していきます＾＾</p>"},"__N_SSG":true}