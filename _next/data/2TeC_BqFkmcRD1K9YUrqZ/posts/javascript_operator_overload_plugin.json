{"pageProps":{"post":"{\"slug\":\"javascript_operator_overload_plugin\",\"title\":\"JavaScriptで演算子オーバーロードしてみる(BabelでAST)\",\"publishedAt\":\"2019-12-08T02:18:34.000Z\",\"description\":\"JavaScriptで演算子オーバーロードを実現するためにbabelのプラグインを作成したため解説します。\",\"tags\":[\"JavaScript\"]}","content":"<h2 class=\"heading lv-2\">はじめに</h2>\n<p class=\"paragraph\">この記事は<a href=\"https://qiita.com/advent-calendar/2019/javascript\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">JavaScript Advent Calendar 2019</a>の８日目の記事になります。</p>\n<p class=\"paragraph\">実は前々から思っていたことがありました。\nそれは**「JavaScriptでも演算子オーバーロードしたい...!」** です。\nということで今回やってみました。</p>\n<h2 class=\"heading lv-2\">アプローチ方法</h2>\n<p class=\"paragraph\">JavaScriptは暗黙的に呼ばれる関数群がいくつかあります(<code class=\"code\">valueOf</code>や<code class=\"code\">toString</code>など)\nただこれらをどういじっても演算子オーバーロードにはなりません。\nそこでタグ付きテンプレートリテラルを頑張って解析するかなぁとか考えていたのですが\nあまりにも見栄えが悪かったので最終手段であるASTをいじっていく方法に決めました。\n今回はbabelのプラグインとして実装します。</p>\n<h2 class=\"heading lv-2\">制作物</h2>\n<p class=\"paragraph\">先に作ったものを載せます。</p>\n<ul class=\"list unordered\">\n<li><a href=\"https://github.com/taqm/babel-plugin-transform-operator-overload\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub</a></li>\n<li><a href=\"https://www.npmjs.com/package/babel-plugin-transform-operator-overload\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">NPM</a></li>\n</ul>\n<p class=\"paragraph\"><del>npmへ上げたかったのですが\n色々とトラブルが重なりログインできないため断念 :crying_cat_face:</del>\npublishしました！\nプラグイン名が重複していたので少し変わっています。</p>\n<p class=\"paragraph\">実際に使うとこんな感じです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js pre\"><code class=\"language-js code\">opol<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> puts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'&#x3C;&#x3C;'</span><span class=\"token operator\">:</span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">log</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  puts <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// => hello world</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hoge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token string\">'+'</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">+</span> arg<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  puts <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// => 200</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 class=\"heading lv-2\">作ってみる</h2>\n<h3 class=\"heading lv-3\">使用ライブラリ</h3>\n<p class=\"paragraph\">ASTやbebelプラグインについては良記事がたくさんあるのでここではあまり深くは触れないでおきます。（後ろに書く参考サイト参照\n利用しているライブラリは以下です。</p>\n<ul class=\"list unordered\">\n<li><a href=\"https://www.npmjs.com/package/@babel/parser\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">@babel/parser</a> → コードをASTに変換する</li>\n<li><a href=\"https://www.npmjs.com/package/@babel/traverse\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">@babel/traverse</a> → ASTを操作する</li>\n<li><a href=\"https://www.npmjs.com/package/@babel/types\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">@babel/types</a> → ASTの要素を操作（作成）する</li>\n</ul>\n<p class=\"paragraph\">実際はライブラリとして公開する関数に、パース済みの値が渡されてくるためライブラリを使っているという実感はあまりないです。</p>\n<h4 class=\"heading lv-4\">小話</h4>\n<p class=\"paragraph\">ASTへの変換をウェブを調べると<code class=\"code\">babylon</code>を使っている記事が多いですが、\n<code class=\"code\">babylon</code>はすでにアーカイブされており<code class=\"code\">@babel/parser</code>への移行を推奨しています。\n気をつけましょう。</p>\n<h3 class=\"heading lv-3\">実装</h3>\n<p class=\"paragraph\">演算子オーバーロードというくらいなので演算部分にフォーカスを当てることで実現できると考えていました。\n実装方針は「演算時の左の要素に<code class=\"code\">+</code>などのプロパティがあった場合はそのプロパティの関数を呼び出す」です。</p>\n<p class=\"paragraph\">まずはコードを記載します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js pre\"><code class=\"language-js code\">parentPath<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\"><span class=\"token maybe-class-name\">BinaryExpression</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token property-access\">node</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">opolMarked</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> operator <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token property-access\">node</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> leftId <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">identifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'left'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> rightId <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">identifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'right'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ここで追加するBinaryExpressionも処理の対象となってしまうため</span>\n    <span class=\"token comment\">// 印をつけて処理を行わないようにする</span>\n    original<span class=\"token punctuation\">.</span><span class=\"token property-access\">opolMarked</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> leftOp <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">memberExpression</span><span class=\"token punctuation\">(</span>leftId<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringLiteral</span><span class=\"token punctuation\">(</span>operator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> overloaded <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">callExpression</span><span class=\"token punctuation\">(</span>leftOp<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>rightId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">binaryExpression</span><span class=\"token punctuation\">(</span>operator<span class=\"token punctuation\">,</span> leftId<span class=\"token punctuation\">,</span> rightId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> fnc <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">callExpression</span><span class=\"token punctuation\">(</span>\n      t<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">arrowFunctionExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>leftId<span class=\"token punctuation\">,</span> rightId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">conditionalExpression</span><span class=\"token punctuation\">(</span>leftOp<span class=\"token punctuation\">,</span> overloaded<span class=\"token punctuation\">,</span> original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p class=\"paragraph\">この<code class=\"code\">BinaryExpression</code>というのが<code class=\"code\">+</code>や<code class=\"code\">&#x3C;</code>などの演算を示すものです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js pre\"><code class=\"language-js code\"><span class=\"token string\">\"expression\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"BinaryExpression\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"left\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Identifier\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"a\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"operator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"right\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Identifier\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token string\">\" name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"b\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"has-filename\"><div class=\"filename\">変換前</div><pre class=\"language-js pre\"><code class=\"language-js code\">a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">↓</p>\n<div class=\"has-filename\"><div class=\"filename\">変換後</div><pre class=\"language-js pre\"><code class=\"language-js code\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> left<span class=\"token punctuation\">[</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> left<span class=\"token punctuation\">[</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">いきなり読みづらいコードが現れましたね。\n↑でも触れましたがやっていることは<strong>左の要素</strong>に<strong>演算子</strong>と同じ記号のプロパティが存在するのなら\nそのプロパティを右の要素を引数として呼び出し、\nプロパティが存在しないのであれば通常通りの演算を行うというものです。\n(<code class=\"code\">left['+']</code>が<code class=\"code\">undefined</code>ではない → オーバーロードしているという割り切り)</p>\n<p class=\"paragraph\">なぜ複雑に見える即時関数にする必要が？と感じると思いますがこれはとある問題があるからです。\n<code class=\"code\">a + b</code> 程度の式ならいいですが <code class=\"code\">a() + b()</code>という式になった場合に計算結果を使い回す必要が出てきます。\n事前に計算を行い変数に入れるというのもありなのですが、変数名の重複などの考慮が面倒だったので即時関数の引数とすることでスコープの狭い変数として計算結果を渡すことで解決しています。</p>\n<h5 class=\"heading lv-5\">ちなみに</h5>\n<blockquote>\n<p class=\"paragraph\">if (path.node.opolMarked) return;</p>\n</blockquote>\n<p class=\"paragraph\">という記述がありますがこれがないと追加された <code class=\"code\">left + right</code> に対して\n同じ処理が走りstackoverflowを起こしてしまいます!</p>\n<h3 class=\"heading lv-3\">完成か？</h3>\n<p class=\"paragraph\">動きだけを見ると完成かと思いました。\nですが...流石にコード量が増えすぎますし、すべてのコードにこれを適用してしまうととんでもないことになってしまいます。\nなので今回は特定の文字列のラベルがついたブロック内でのみ↑の処理を行うようにしました。\nこうすることで最小限のコードの増加で済みそうです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js pre\"><code class=\"language-js code\">opol<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... このブロック内のみ変換処理を行う。</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js pre\"><code class=\"language-js code\">visitor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\"><span class=\"token maybe-class-name\">LabeledStatement</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parentPath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>parentPath<span class=\"token punctuation\">.</span><span class=\"token property-access\">node</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">label</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'opol'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 class=\"heading lv-2\">本当の完成</h2>\n<p class=\"paragraph\">これで完成！</p>\n<div class=\"remark-highlight\"><pre class=\"language-js pre\"><code class=\"language-js code\"><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">[</span><span class=\"token string\">'&#x3C;&#x3C;'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nopol<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  puts <span class=\"token operator\">&#x3C;&#x3C;</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// => [1,2,3]</span>\n\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'==='</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  puts <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x26;&#x26;</span> a <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">&#x26;&#x26;</span> a <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">これできれいな構文や気味の悪い構文を自由にかけるようになりました。</p>\n<h3 class=\"heading lv-3\">課題</h3>\n<p class=\"paragraph\">ESLintや型の解決が一切行われないので\n知らない人が見ると一体何が起きているのかわからない状態となります...:grimacing:\nもちろんですがTypeScriptでは使えません。</p>\n<p class=\"paragraph\"><del>あとテストも書けてません。（動作確認も怪しいです）</del> テスト書きました\n課題まみれです。</p>\n<h2 class=\"heading lv-2\">最後に</h2>\n<p class=\"paragraph\">長年の夢だったJavaScriptでの演算子オーバーロードを実現することができました。\n正直実用的ではないですが、普段の業務では扱わないような技術で頭の体操になりますね。\n本当はもっといろんなことをやりたかったのですが間に合わなかったので少しずつ機能を足していければと思います。(npmへもそのうち上げたいです）</p>\n<p class=\"paragraph\">そして、今回はbabel経由でASTの操作を行いました。\nASTを扱うのはハードルが高いように感じますがとても簡単なのでぜひ皆さんも触ってみてください。</p>\n<hr>\n<p class=\"paragraph\">おしまい</p>\n<h2 class=\"heading lv-2\">参考サイト</h2>\n<ul class=\"list unordered\">\n<li><a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/ja/plugin-handbook.md\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/jamiebuilds/babel-handbook/blob/master/translations/ja/plugin-handbook.md</a></li>\n<li><a href=\"https://efcl.info/2019/12/03/dive-to-ast/\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">https://efcl.info/2019/12/03/dive-to-ast/</a></li>\n<li><a href=\"https://sakura.io/blog/2017/12/13/babel-plugins/\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">https://sakura.io/blog/2017/12/13/babel-plugins/</a></li>\n</ul>"},"__N_SSG":true}