{"pageProps":{"post":"{\"slug\":\"sse_express\",\"title\":\"ExpressでServer Sent Event (SSE) を簡単に扱ってみる\",\"publishedAt\":\"2018-06-26T10:38:36.000Z\",\"description\":\"ServerSentEventをNode.jsのライブラリであるexpressから利用しやすくするライブラリを作ったので解説します。\",\"tags\":[\"JavaScript\",\"Node.js\"]}","content":"<h2 class=\"heading lv-2\">概要</h2>\n<p class=\"paragraph\">「暇だし簡単なチャットでも作ってみようかなー」と思い\n車輪の再発明とわかりつつ、ライブラリっぽいものを作ってみました。</p>\n<h3 class=\"heading lv-3\">Server Sent Event(SSE)ってなに</h3>\n<p class=\"paragraph\">すごく大雑把に言うと\n「コネクションを張りっぱなしにして、必要な時にメッセージ送信を行う仕組み」です。</p>\n<p class=\"paragraph\">これだけを聞くとWebSocketと一緒なのかな？と思いますが、\nSSEは<strong>サーバ → クライアント</strong>への一方通行となっています。</p>\n<p class=\"paragraph\">クライアントはSSEのエンドポイントへ接続しレスポンスを待つのではなく、\nソケットをそのままlistenし続け、サーバサイドでなにかしらPushしたいタイミングで、\nクライアント側へデータを送信し処理を行います。</p>\n<p class=\"paragraph\">とても省略しましたが、とてもシンプルな仕組みであり\n、\nHTTP通信に親しみのある方なら、とっつきやすいと思います。</p>\n<h4 class=\"heading lv-4\">参考になった記事</h4>\n<ul class=\"list unordered\">\n<li><a href=\"https://www.webprofessional.jp/real-time-apps-websockets-server-sent-events/\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.webprofessional.jp/real-time-apps-websockets-server-sent-events/</a></li>\n<li><a href=\"https://uhyohyo.net/javascript/13_2.html\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">https://uhyohyo.net/javascript/13_2.html</a></li>\n<li><a href=\"https://www.slideshare.net/mawarimichi/push-37869433\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.slideshare.net/mawarimichi/push-37869433</a></li>\n</ul>\n<h2 class=\"heading lv-2\">環境</h2>\n<p class=\"paragraph\">型定義が大好きなので、TypeScriptを使っています</p>\n<h2 class=\"heading lv-2\">完成したもの</h2>\n<p class=\"paragraph\">ソースコードは<a href=\"https://github.com/taqm/express-sse-middleware\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">こちら</a></p>\n<p class=\"paragraph\">完全にドキュメントが面倒になったパターンなので、\nREADMEなどはあとでちゃんと整備します</p>\n<h2 class=\"heading lv-2\">使い方</h2>\n<p class=\"paragraph\">まずはインストール\n<code class=\"code\">npm install express-sse-middleware</code>\nyarn を使う場合は\n<code class=\"code\">yarn add express-sse-middleware</code></p>\n<p class=\"paragraph\">README通りですが一番シンプルな使い方が↓</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript pre\"><code class=\"language-javascript code\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">express</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> sseMiddleware <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'express-sse-middleware'</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span>sseMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/path'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> sentMsg <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sentMsg</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// １秒おきに数値を送信する</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\"><code class=\"code\">res.sse()</code>の戻り値である<code class=\"code\">sentMsg</code>を実行するタイミングで\nクライアントへと値が送信されます。</p>\n<p class=\"paragraph\">実装は60行程度なので非常にシンプルに作っています。\nぜひソースコードを見てみてください。</p>\n<h2 class=\"heading lv-2\">demo</h2>\n<p class=\"paragraph\"><del><a href=\"https://github.com/taqm/express-sse-sample\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">サンプルプロジェクトのソース</a></del>\n<del>Herokuで実際に動かしています。</del></p>\n<p class=\"paragraph\">こちら閉鎖しました</p>\n<h2 class=\"heading lv-2\">感想</h2>\n<p class=\"paragraph\">仕様を完全に実装できてはいませんが、簡単に作ることができました。\nむしろTypeScriptでNpmモジュールを作ったのが初めてなので\nそちらのほうが大変だったかも・・・</p>\n<p class=\"paragraph\">SSEに関しては、Spring5でも採用されていたり\nリアクティブプログラミングと相性が良かったりするので、今後は主流の技術になるかも知れません。</p>\n<p class=\"paragraph\">ちなみに、とりあえず動かしてみたかった系の実装なので\nもし危険な処理や、他にベストプラクティスがあるのであれば、ぜひ教えてください！</p>"},"__N_SSG":true}