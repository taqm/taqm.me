{"pageProps":{"post":"{\"slug\":\"typescript_decorator_introduction\",\"title\":\"TypeScriptによるデコレータの基礎と実践\",\"publishedAt\":\"2018-12-10T18:11:30.000Z\",\"description\":\"TypeScriptの機能である'デコレータ'について、公式ドキュメントを交えながら基礎と実践の解説を行います。\",\"tags\":[\"TypeScript\"]}","content":"<h2 class=\"heading lv-2\">はじめに</h2>\n<p class=\"paragraph\">まずはじめに、\nアドベントカレンダーに参加した途端に仕事が超絶忙しくなったため、\n死にそうになりながらこの記事を書いています。</p>\n<p class=\"paragraph\">御託は置いておいて、タイトルの通り「デコレータ」について少しまとめてみましょう。</p>\n<h5 class=\"heading lv-5\">書くこと</h5>\n<ul class=\"list unordered\">\n<li>デコレータの基礎</li>\n<li>reflect-metadata</li>\n<li>実践</li>\n</ul>\n<h2 class=\"heading lv-2\">\bデコレータの基礎</h2>\n<h3 class=\"heading lv-3\">公式</h3>\n<p class=\"paragraph\">とりあえず何事も本家のドキュメントを見てみるのが一番</p>\n<ul class=\"list unordered\">\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">公式</a></li>\n<li><a href=\"https://mae.chab.in/archives/59845\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">公式の日本語訳</a></li>\n</ul>\n<p class=\"paragraph\">デコレータはJavaScriptの\b<code class=\"code\">Stage-2</code>状態の機能であり、\n今後\b仕様変更が入る可能性があります。</p>\n<p class=\"paragraph\">ドラフト状態の仕様についての詳しい内容は\n<a href=\"https://github.com/tc39/proposal-decorators\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">\bここ</a>とか<a href=\"https://tc39.github.io/proposal-decorators/\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">ここ</a>！</p>\n<p class=\"paragraph\">↑の日本語訳サイトを読めば大体わかりますし\n<a href=\"https://qiita.com/Quramy/items/e3a43bb1734b8a7331e8\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">こういった素晴らしい記事</a>もあるので\n\b本記事では簡単なおさらい程度にします。</p>\n<h3 class=\"heading lv-3\">デコレータとは</h3>\n<p class=\"paragraph\">デコレータとはクラスの宣言などに\bアタッチできる特別な宣言です。</p>\n<ul class=\"list unordered\">\n<li>クラス宣言</li>\n<li>メソッド</li>\n<li>アクセサ(get, set)</li>\n<li>プロパティ</li>\n<li>メソッド引数</li>\n</ul>\n<p class=\"paragraph\">↑これらに適用することができます</p>\n<h3 class=\"heading lv-3\">前準備</h3>\n<p class=\"paragraph\">あくまで実験的機能という立ち位置であり、\nデフォルトでは使うことができません。</p>\n<p class=\"paragraph\">そこでコンパイルの設定に「<code class=\"code\">デコレータ使うよ！</code>」と追記してあげる必要があります。\n以下設定内容</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash pre\"><code class=\"language-bash code\">tsc --target ES5 --experimentalDecorators\n</code></pre></div>\n<p class=\"paragraph\">or</p>\n<div class=\"has-filename\"><div class=\"filename\">tsoncig.json</div><pre class=\"language-json pre\"><code class=\"language-json code\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"experimentalDecorators\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 class=\"heading lv-3\">Decorator Factories</h3>\n<p class=\"paragraph\">デコレータを作る関数みたいなものです。\nデコレータに対して値を渡したい場合に利用します</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">function</span> <span class=\"token function\">color</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// this is the decorator factory</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ここがデコレータ</span>\n        <span class=\"token comment\">// ここでtargetやvalueを使って色々やる</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 class=\"heading lv-3\">Decorator Composition</h3>\n<p class=\"paragraph\">デコレータは１つの対象に複数適用することができ、\nDecorator Factoriesを利用した宣言を行なった場合は、以下のような順序で評価されます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f(): evaluated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> propertyKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> PropertyDescriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f(): called\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"g(): evaluated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> propertyKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> PropertyDescriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"g(): called\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">{</span>\n    @<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    @<span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">出力は↓のような感じ</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown pre\"><code class=\"language-unknown code\">f(): evaluated\ng(): evaluated\ng(): called\nf(): called</code></pre></div>\n<h3 class=\"heading lv-3\">Decorator Evaluation</h3>\n<p class=\"paragraph\">デコレータの評価される順番についてです。\n\b評価される順番というのは厳格に決まっており、\nこれらを把握していないと\b痛い目をみることがあります。</p>\n<ol class=\"list ordered\">\n<li>インスタンスメンバーへ適用\n<ol class=\"list ordered\">\n<li>パラメータ・デコレータ</li>\n<li>メソッド・デコレータ</li>\n<li>アクセサ・デコレータ</li>\n<li>プロパティ・デコレータ</li>\n</ol>\n</li>\n<li>Staticメンバーへ適用\n<ol class=\"list ordered\">\n<li>パラメータ・デコレータ</li>\n<li>メソッド・デコレータ</li>\n<li>アクセサ・デコレータ</li>\n<li>プロパティ・デコレータ</li>\n</ol>\n</li>\n<li>コンストラクタ関数\n<ol class=\"list ordered\">\n<li>パラメータ・デコレータ</li>\n</ol>\n</li>\n<li>クラス\n<ol class=\"list ordered\">\n<li>クラス・デコレータ</li>\n</ol>\n</li>\n</ol>\n<p class=\"paragraph\">↑の順番でデコレータ関数が評価されていきます。</p>\n<p class=\"paragraph\">また、複数のデコレータがついている場合の評価順は\n一つ前の項目で触れたとおりになっています。</p>\n<p class=\"paragraph\">後ほど出てくる<code class=\"code\">reflect-metadata</code>の説明で少し触れるつもりなので、\nとりあえず評価の順番が\b決まっていることだけ抑えておきましょう。\b</p>\n<h3 class=\"heading lv-3\">Class Decorators: クラス・デコレータ</h3>\n<p class=\"paragraph\">クラス宣言の直前で宣言します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">function</span> <span class=\"token function\">classDecorator</span><span class=\"token punctuation\">(</span>fnc<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// fnc = コンストラクタ\b関数</span>\n    <span class=\"token comment\">// prototypeをいじったりする</span>\n<span class=\"token punctuation\">}</span>\n\n@classDecorator\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 class=\"heading lv-3\">Method Decoratos: メソッド・デコレータ</h3>\n<p class=\"paragraph\">メソッド宣言の直前で宣言します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">function</span> <span class=\"token function\">methodDecorator</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> descriptor<span class=\"token operator\">:</span> PropertyDescriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ここで\bごにょごにょする</span>\n    <span class=\"token comment\">// 具体的な使い方は後ほど</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token punctuation\">{</span>\n    @methodDecorator\n    <span class=\"token function\">hoge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 class=\"heading lv-4\">引数</h4>\n<table class=\"table\">\n<thead class=\"thead\">\n<tr class=\"tr\">\n<th class=\"th\"></th>\n<th class=\"th\"></th>\n</tr>\n</thead>\n<tbody class=\"tbody\">\n<tr class=\"tr\">\n<td class=\"td\">第１引数</td>\n<td class=\"td\">\bメソッドがstaticの場合は、コンストラクタ関数。インスタンスメンバの場合は、クラスのprototype</td>\n</tr>\n<tr class=\"tr\">\n<td class=\"td\">第２引数</td>\n<td class=\"td\">\bメンバのキー名</td>\n</tr>\n<tr class=\"tr\">\n<td class=\"td\">第３引数</td>\n<td class=\"td\">\bプロパティ・ディスクリプタ</td>\n</tr>\n</tbody>\n</table>\n<h4 class=\"heading lv-4\">戻り値</h4>\n<p class=\"paragraph\">値を返却すると、\n戻り値が\bプロパティ・ディスクリプタとして\b使用されます。</p>\n<p class=\"paragraph\">ここで<code class=\"code\">プロパティ・ディスクリプタ</code>ってのが出てきますが\n<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">このMDNのページ</a>を見ると大体の使い方はわかります。</p>\n<p class=\"paragraph\">すごくざっくりいうと\n「プロトタイプではなく、プロパティそのものに対してアクセスできるもの」\nという認識で大丈夫です。</p>\n<h3 class=\"heading lv-3\">Accessor Decorators: アクセサ・デコレータ</h3>\n<p class=\"paragraph\">アクセサ宣言の直前で宣言します。\n引数や動きはメソッド・デコレータと同じです。</p>\n<h3 class=\"heading lv-3\">Property Decorators: プロパティ・デコレータ</h3>\n<p class=\"paragraph\">プロパティ宣言の直前で宣言します。</p>\n<p class=\"paragraph\">前述したデコレータと似た宣言方法ですが、\nメソッドやアクセサと違って、プロパティディスクリプタが提供されないので要注意です。</p>\n<p class=\"paragraph\">ただし、デコレータ関数の戻り値としてプロパティディスクリプタを返却することで\n利用する事が可能です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">function</span> <span class=\"token function\">propertiyDecorator</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ここで\bごにょごにょする</span>\n    <span class=\"token comment\">// return { ... } // 戻り値を返却することも可能</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token punctuation\">{</span>\n    @propertiyDecorator\n    message<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 class=\"heading lv-3\">Paramerter Decorators: パラメータ・デコレータ</h3>\n<p class=\"paragraph\">パラメータ宣言の直前で宣言します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">function</span> <span class=\"token function\">parameterDecorator</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ここで\bごにょごにょする</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">hoge</span><span class=\"token punctuation\">(</span>@parameterDecorator param<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 class=\"heading lv-4\">引数</h4>\n<table class=\"table\">\n<thead class=\"thead\">\n<tr class=\"tr\">\n<th class=\"th\"></th>\n<th class=\"th\"></th>\n</tr>\n</thead>\n<tbody class=\"tbody\">\n<tr class=\"tr\">\n<td class=\"td\">第１引数</td>\n<td class=\"td\">\bメソッドがstaticの場合は、コンストラクタ関数。インスタンスメンバの場合は、クラスのprototype</td>\n</tr>\n<tr class=\"tr\">\n<td class=\"td\">第２引数</td>\n<td class=\"td\">\bメソッドの名前</td>\n</tr>\n<tr class=\"tr\">\n<td class=\"td\">第３引数</td>\n<td class=\"td\">\b引数の順番</td>\n</tr>\n</tbody>\n</table>\n<p class=\"paragraph\">第２引数は、デコレータを宣言した引数の名前ではなく\nメソッドそのものの名前になるので注意してください</p>\n<hr>\n<p class=\"paragraph\">あってもなくてもいいようなまとめを書いてみましたが、\n「結局どんなことができるの？」ってわけです。</p>\n<p class=\"paragraph\">公式ドキュメントにもそれっぽいものが書いてありますが、\n正直「ふーん」って感じです。（みなさんどうですか？</p>\n<p class=\"paragraph\">というかデコレータの説明中にいきなり<code class=\"code\">reflect-metadata</code>の話をブチ込んでくるあたり\nちょっと初学者には優しくない感じがします。\nそこで次の章で<strong>すこし</strong>だけ<code class=\"code\">reflect-metadata</code>に触れて、そのあと実際の使いみちを紹介します。</p>\n<h3 class=\"heading lv-3\">reflect-metadata</h3>\n<p class=\"paragraph\"><code class=\"code\">Metadata Reflection API</code>といわれるものの\nPolyfillを追加するライブラリになります。</p>\n<p class=\"paragraph\">内容はReflectオブジェクトを拡張して、\nメタデータを保持させたり取得したりできるようにするものです。</p>\n<p class=\"paragraph\">デコレータでゴニョゴニョする場合は割とお世話になることがあり、\n気づいたら何かの依存で<code class=\"code\">node_modules</code>に入っていたりすることも...</p>\n<h4 class=\"heading lv-4\">使用例</h4>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">import</span> <span class=\"token string\">'reflect-metadata'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">KEY</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">hoge</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> propKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> desc<span class=\"token operator\">:</span> PropertyDescriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> sample <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token constant\">KEY</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> propKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">値は </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sample<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> です</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fuga</span><span class=\"token punctuation\">(</span>sample<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> propKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> idx<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">defineMetadata</span><span class=\"token punctuation\">(</span><span class=\"token constant\">KEY</span><span class=\"token punctuation\">,</span> sample<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> propKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClass</span> <span class=\"token punctuation\">{</span>\n  @hoge\n  <span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span>@<span class=\"token function\">fuga</span><span class=\"token punctuation\">(</span><span class=\"token string\">'テスト'</span><span class=\"token punctuation\">)</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 実行結果</span>\n<span class=\"token comment\">// -> 値は テスト です</span>\n</code></pre></div>\n<p class=\"paragraph\">あくまで<code class=\"code\">使用例</code>という口実のもと実用的ではないサンプルにしてます\n\b\nこういったように\nデコレータのついたメソッドにメタデータを付与して\n別のデコレータから参照することができるのが、\bこの機能の重要なポイントです。</p>\n<p class=\"paragraph\">そして、ここでデコレータの呼ばれる順番がかなり重要になってきます。\n先に述べた「Decorator Evaluation」のとおり、\nデコレータの評価順は厳格に定められております。</p>\n<p class=\"paragraph\">つまり、クラス・デコレータで付与したメタデータは\nメソッド・デコレータで参照することができないということになるのです。</p>\n<hr>\n<p class=\"paragraph\">なんとなく可能性を感じてもらえることはできたでしょうか？\n次の章から、実際に\bデコレータを使って何ができるのかを紹介していきます。</p>\n<h2 class=\"heading lv-2\">実践！</h2>\n<p class=\"paragraph\">ここからはデコレータと<code class=\"code\">reflect-metadata</code>を使って\b\n実際に使えそうな？実装を紹介していきます。</p>\n<p class=\"paragraph\">コードをベタッと貼り付けたので少し長いですが\b参考になればと思います。</p>\n<h3 class=\"heading lv-3\">実践１. ログ出力</h3>\n<p class=\"paragraph\">まずデコレータといって大体の人が思いつくのがログの出力ですね。\nこのようにAOPに活用することが、一般的？なのだと思います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">function</span> <span class=\"token function\">outputLog</span><span class=\"token punctuation\">(</span>\n  target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n  propKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  descriptor<span class=\"token operator\">:</span> PropertyDescriptor<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> descriptor<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  descriptor<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>target<span class=\"token punctuation\">.</span><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">#</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>propKey<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: start</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">Reflect</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* ret が Promiseか判定 */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>sec<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> start <span class=\"token operator\">&#x3C;=</span> sec <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>sec<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> sec <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  @outputLog\n  <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  @outputLog\n  <span class=\"token keyword\">async</span> <span class=\"token function\">greetAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Sample</span><span class=\"token punctuation\">(</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Sample</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async workd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">greetAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 出力↓</span>\n<span class=\"token comment\">/*</span>\n<span class=\"token comment\">Sample#greet: start</span>\n<span class=\"token comment\">hello world</span>\n<span class=\"token comment\">Sample#greet: 3001.297ms</span>\n<span class=\"token comment\">Sample#greetAsync: start</span>\n<span class=\"token comment\">hello async workd</span>\n<span class=\"token comment\">Sample#greetAsync: 3005.303ms</span>\n<span class=\"token comment\">*/</span>\n</code></pre></div>\n<p class=\"paragraph\">このようにプロパティディスクリプタを利用して、\n本来の関数をラップすることで\b実現可能です。</p>\n<p class=\"paragraph\">計測のログなどのロジックとは関係ない部分を切り出すことで\nクラスの中では\b\b業務ロジックに集中することができます。</p>\n<p class=\"paragraph\"><code class=\"code\">async/await</code>対応しようと思ったのですが\nちょっと調べてみると、オブジェクトがPromiseかどうかの判定が\n思ったより面倒そうだったので仮実装にしています。</p>\n<h3 class=\"heading lv-3\">実践２. 引数のチェック</h3>\n<p class=\"paragraph\">\b引数の検証などを行ってみます。\n\u001b↓の例では<code class=\"code\">@notBlank</code>をつけた引数に\n空文字orスペース\bのみが来た場合にエラーにしています</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">import</span> <span class=\"token string\">'reflect-metadata'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">NOT_BLANK</span> <span class=\"token operator\">=</span> <span class=\"token string\">'not blank'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> propKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> desc<span class=\"token operator\">:</span> PropertyDescriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> list<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnMetadata</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NOT_BLANK</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> propKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>list<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> method <span class=\"token operator\">=</span> desc<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  desc<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> blanks <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=></span> args<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>blanks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token string\">'引数がブランクです'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Reflect</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">notBlank</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> propKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> idx<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnMetadata</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NOT_BLANK</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> propKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">defineMetadata</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NOT_BLANK</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> propKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token punctuation\">{</span>\n  @validate\n  <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>@notBlank name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → \bエラー発生</span>\n</code></pre></div>\n<p class=\"paragraph\">パラメータ・デコレータだけでは\bメソッドの実行に干渉できないため、\nメタデータを付与してメソッド・デコレータ内で処理を行っています。</p>\n<h3 class=\"heading lv-3\">実践３. 関数の結果を書き換え</h3>\n<p class=\"paragraph\">\b実践１の内容に似ていますが、\n関数の戻り値を上書きすることも可能です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">function</span> <span class=\"token function\">uriEncoded</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> propKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> desc<span class=\"token operator\">:</span> PropertyDescriptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> method <span class=\"token operator\">=</span> desc<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  desc<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">Reflect</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token punctuation\">{</span>\n  @uriEncoded\n  <span class=\"token function\">hoge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'こんにちは'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hoge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 出力</span>\n<span class=\"token comment\">// %E3%81%93%E3%82%93%E3%81%AB%E3%81%A1%E3%81%AF</span>\n</code></pre></div>\n<p class=\"paragraph\"><code class=\"code\">@uriEncoded</code>がついたメソッドの戻り値が\b<code class=\"code\">string</code>だった場合\nURIエンコードして返すようにしています。\nここでは\b簡単なエンコードですが、\nもっと複雑な暗号化・復号化を行う場合には有効になってきます。</p>\n<h3 class=\"heading lv-3\">実践４. 依存関係の注入（DI）</h3>\n<p class=\"paragraph\">ここでは実践というよりライブラリの紹介になります。\b\n<a href=\"https://github.com/inversify/InversifyJS\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">\bInversifyJS</a> というライブラリを使ってデコレータによるDIを実現してみます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> injectable<span class=\"token punctuation\">,</span> inject<span class=\"token punctuation\">,</span> Container <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'inversify'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'reflect-metadata'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">USER_REPOS_KEY</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'userRepository'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">GREETER_KEY</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'greeter'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> User<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n@<span class=\"token function\">injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRepositoryImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> User <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 外部に依存した実装</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'花子'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n@<span class=\"token function\">injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>\n    @<span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token constant\">USER_REPOS_KEY</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> userRepos<span class=\"token operator\">:</span> UserRepository<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userRepos<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>user<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// コンテナにDI対象のクラスたちを追加していく</span>\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Container</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">container</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token constant\">USER_REPOS_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>UserRepositoryImpl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">container</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GREETER_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>Greeter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> greeter <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token operator\">&#x3C;</span>Greeter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token constant\">GREETER_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngreeter<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sample id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → hello 花子</span>\n\n</code></pre></div>\n<p class=\"paragraph\">\b公式のサンプルをすごく縮めてみた版になります。\nこうすることでDBアクセスなどを行う処理を\b抽象化し\nテストが書きやすい様になりました。</p>\n<p class=\"paragraph\">内部では<code class=\"code\">reflect-metadata</code>によって\n\b「この関数の\b○番目の引数はこのキーで紐付ける」など\n\bガシガシと\b処理が動いています。</p>\n<p class=\"paragraph\">便利なライブラリなのでぜひ使ってみてください。</p>\n<h3 class=\"heading lv-3\">実践５. WEBフレームワークを作ってみる</h3>\n<p class=\"paragraph\">デコレータを使ってWEBフレームワークを作ってみましょう。\nなどと言いつつも、１から作るのはきついので<code class=\"code\">Express</code>を拡張する形で...\nJavaの<code class=\"code\">SpringBoot</code>のようなものを目指します。</p>\n<div class=\"has-filename\"><div class=\"filename\">fw.ts</div><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">import</span> <span class=\"token string\">'reflect-metadata'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRouter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> route<span class=\"token operator\">!</span><span class=\"token operator\">:</span> express<span class=\"token punctuation\">.</span>Router<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ActionMetadata</span> <span class=\"token punctuation\">{</span>\n  path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">'get'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">;</span>\n  actionName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ACTION_KEY</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> MyRouter<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token keyword\">extends</span></span> fn <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> list<span class=\"token operator\">:</span> ActionMetadata<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ACTION_KEY</span><span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>meta<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        route<span class=\"token punctuation\">[</span>meta<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>meta<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>meta<span class=\"token punctuation\">.</span>actionName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// readonly対策でany化</span>\n      <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>route <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> GetMapping <span class=\"token operator\">=</span> <span class=\"token function\">mappingFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> PostMapping <span class=\"token operator\">=</span> <span class=\"token function\">mappingFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mappingFactory</span><span class=\"token punctuation\">(</span>method<span class=\"token operator\">:</span> ActionMetadata<span class=\"token punctuation\">[</span><span class=\"token string\">'method'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> actionName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> dsc<span class=\"token operator\">:</span> PropertyDescriptor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> meta<span class=\"token operator\">:</span> ActionMetadata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> actionName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">addMetadata</span><span class=\"token punctuation\">(</span>meta<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token constant\">ACTION_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">addMetadata</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> Symbol<span class=\"token punctuation\">,</span> propKey<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> propKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">defineMetadata</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> propKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">デコレータの定義は↑のような感じです。</p>\n<ol class=\"list ordered\">\n<li>アクションとして扱いたいメソッドにデコレータを付与</li>\n<li>メソッドデコレータの中で、HTTPメソッド・パス・アクション名をメタデータとして登録</li>\n<li>最後に評価されるクラス・デコレータでコンストラクタを上書きし、2.で登録したメタデータを元にRouterを定義</li>\n</ol>\n<p class=\"paragraph\">日本語で書くと難しいですが以上のような流れになります。</p>\n<p class=\"paragraph\">※今回メソッドの戻り値をそのままレスポンスにするようにしました。</p>\n<h6>ミニテクニック</h6>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> MyRouter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">というクラス・デコレータを定義しています。\nこれで　<code class=\"code\">MyRouter</code>を実装しているクラスのみに付与できるようになります。</p>\n<h4 class=\"heading lv-4\">実際に使ってみる</h4>\n<p class=\"paragraph\">こんな感じになります！</p>\n<div class=\"has-filename\"><div class=\"filename\">index.ts</div><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller<span class=\"token punctuation\">,</span> MyRouter<span class=\"token punctuation\">,</span> GetMapping <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./fw'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MainController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MyRouter</span> <span class=\"token punctuation\">{</span>\n\n  @<span class=\"token function\">GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'hello express boot'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  @<span class=\"token function\">GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/hello'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span> express<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  @<span class=\"token function\">GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/json'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">json</span><span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span> express<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      message<span class=\"token operator\">:</span> <span class=\"token string\">'this is json response'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MainController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p class=\"paragraph\">おお！だいぶSpringBootっぽい！\nあとは**実践４．**で扱ったようなDIなどを使ったり、\nパラメータとのマッピングも行うことができればかなり近づくのではないでしょうか。\n今まで説明した機能を使えばすべてSpringBootのような機能もほぼ実現可能です！</p>\n<p class=\"paragraph\">作ってみたら予想以上に面白かったので\n<del>時間ができたらちゃんと仕上げてnpmに公開する予定ですのでお楽しみに:relaxed:</del>\n<del>（その時はまた記事を書こうと思います</del></p>\n<p class=\"paragraph\">すでに似たようなライブラリが存在してました・・・\n<a href=\"https://www.npmjs.com/package/routing-controllers\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">routing-controllers</a></p>\n<p class=\"paragraph\">驚くくらいやってることが一緒です。\nなので今回作ってみたものは完成することはないでしょう（泣）</p>\n<h2 class=\"heading lv-2\">あとがき</h2>\n<p class=\"paragraph\">\b\bデコレータについて</p>\n<ul class=\"list unordered\">\n<li>\b存在は知っているけど使ったことない</li>\n<li>フレームワークが推奨してるからなんとなく使っている</li>\n</ul>\n<p class=\"paragraph\">という人が結構多いのではないでしょうか？\n実際に\b見てみるとただの関数であり、だれでも簡単に作れるようなものです。</p>\n<p class=\"paragraph\">ただし、乱用すると型情報が欠落したり、パフォーマンスに影響が出るなどの\n\bデメリットも存在するため、ご利用は計画的に:point_up:</p>\n<p class=\"paragraph\">では皆さんよいデコレータライフを！o(･ω･｡)</p>\n<hr>\n<p class=\"paragraph\">おしまい</p>"},"__N_SSG":true}