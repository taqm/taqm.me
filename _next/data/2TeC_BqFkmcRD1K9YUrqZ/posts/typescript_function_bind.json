{"pageProps":{"post":"{\"slug\":\"typescript_function_bind\",\"title\":\"TypeScriptでFunction.bindを使うのはよくない\",\"publishedAt\":\"2018-10-02T06:05:33.000Z\",\"description\":\"JavaScriptの機能であるFunction.bindはTypeScriptではあまり推奨されない理由を解説します。\",\"tags\":[\"TypeScript\"]}","content":"<h2 class=\"heading lv-2\">追記</h2>\n<p class=\"paragraph\">TypeScript 3.2 RC にてBind周りに変更が入りました</p>\n<p class=\"paragraph\">詳細については以下の記事を参考にしてください！\n<a href=\"https://qiita.com/vvakame/items/79557e00cfe6d3c612cd\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">https://qiita.com/vvakame/items/79557e00cfe6d3c612cd</a></p>\n<h2 class=\"heading lv-2\">はじめに</h2>\n<p class=\"paragraph\">みなさんご存知かと思いますが、\nJavaScriptの<code class=\"code\">this</code>は他の言語では考えられない動きをします。\nそこで<code class=\"code\">this</code>を固定するために<code class=\"code\">.bind</code>関数を使うことが一般的ですが、\nTypeScriptの場合はそうはいきません。</p>\n<h2 class=\"heading lv-2\">何故なのか</h2>\n<p class=\"paragraph\">まずはbindがどういう定義になっているのか見てみましょう</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token function\">Function</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>argArray<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n</code></pre></div>\n<p class=\"paragraph\">はい。\n色々と<code class=\"code\">any</code>です。</p>\n<p class=\"paragraph\">せっかくの型を大事にする言語なのにこれでは台無しです。</p>\n<h2 class=\"heading lv-2\">じゃあどうすれば？</h2>\n<p class=\"paragraph\">マイクロソフト公式がthisの扱いについてページを作っているので\nここを元に解説していきます。<a href=\"https://github.com/Microsoft/TypeScript/wiki/&#x27;this&#x27;-in-TypeScript\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">公式</a></p>\n<h3 class=\"heading lv-3\">Use Instance Functions</h3>\n<p class=\"paragraph\">TypeScriptのクラスとしてデフォルトのプロトタイプメソッドではなく、\nインスタンスにアロー関数を生やす形で定義します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript pre\"><code class=\"language-typescript code\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> status <span class=\"token operator\">=</span> <span class=\"token string\">\"blah\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function-variable function\">run</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// &#x3C;-- note syntax here</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SAFE, 'run' will always have correct 'this'</span>\n</code></pre></div>\n<h4 class=\"heading lv-4\">いい点</h4>\n<ul class=\"list unordered\">\n<li>使用する人が<code class=\"code\">this</code>ついて処理漏れが起きません</li>\n<li>型安全です</li>\n<li>関数にパラメータがある場合は、追加作業は必要ありません</li>\n</ul>\n<p class=\"paragraph\">３つ目についてはどういったメリットなのかはあまり汲み取れていません…\n<strong>どなたか分かる方コメントなどでおしえていただけると嬉しいです</strong></p>\n<h4 class=\"heading lv-4\">悪い点</h4>\n<ul class=\"list unordered\">\n<li>そのクラスを継承した際に、派生クラスから<code class=\"code\">super.XXX</code>でアクセスすることができません</li>\n<li>そのメソッドは事前にバインドされ、型安全ではないコントラクトがクラスとコンシューマの間で追加されることはありません\n<ul class=\"list unordered\">\n<li>原文: The exact semantics of which methods are \"pre-bound\" and which aren't create an additional non-typesafe contract between the class and its consumers</li>\n</ul>\n</li>\n</ul>\n<p class=\"paragraph\">正直２つ目はよく意味がわかりませんでした…(ダメダメだ\n<strong>どなたか分かる方コメントなどでおしえていただけると嬉しいです</strong>(２度目)</p>\n<h4 class=\"heading lv-4\">いい点 かつ 悪い点</h4>\n<p class=\"paragraph\">この方法だと、クラスインスタンスを作るたびに、クロージャが作成されてしまいます。\nもし普通のインスタンスメソッドとしてしか実行しなのであれば、この実装方法は過剰すぎます。\nただし、このメソッドをコールバック関数としてよく使うのであれば、\nその都度クロージャを作るよりもこのほうが良いでしょう</p>\n<h3 class=\"heading lv-3\">Local Fat Arrow</h3>\n<p class=\"paragraph\">その都度クロージャを作ってあげるパターンです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts pre\"><code class=\"language-ts code\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">someCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 class=\"heading lv-4\">いい点</h4>\n<ul class=\"list unordered\">\n<li>これは100%型安全です！</li>\n<li>ECMAScript3でも動きます</li>\n<li>インスタンス名の記述が１度いいです</li>\n</ul>\n<h4 class=\"heading lv-4\">悪い点</h4>\n<ul class=\"list unordered\">\n<li>パラメータを２度記述しないといけません</li>\n<li>可変長引数可変長引数を利用する場合動作しません</li>\n</ul>\n<h4 class=\"heading lv-4\">いい点 かつ 悪い点</h4>\n<p class=\"paragraph\">パフォーマンス/メモリついてはインスタンス関数と比較すると正反対です\n(こちらの方がメモリは使わないが、少しパフォーマンスが悪い)</p>\n<h2 class=\"heading lv-2\">まとめ</h2>\n<p class=\"paragraph\">一応元記事には<code class=\"code\">Function.bind</code>についての記載もあったのですが、\n現時点で型安全ではないので、採用はないかなと思います。</p>"},"__N_SSG":true}