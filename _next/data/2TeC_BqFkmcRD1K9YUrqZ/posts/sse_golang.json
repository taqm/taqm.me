{"pageProps":{"post":"{\"slug\":\"sse_golang\",\"title\":\"Go言語でServerSentEvents(SSE)\",\"publishedAt\":\"2018-10-16T01:38:26.000Z\",\"description\":\"ServerSentEventをGo言語から扱って見たシンプルな例を解説します。\",\"tags\":[\"Golang\"]}","content":"<h2 class=\"heading lv-2\">はじめに</h2>\n<p class=\"paragraph\">タイトルの通りGo言語でServerSentEvent(以下SSE)を実装してみます。</p>\n<p class=\"paragraph\">まずSSEとはなあに？って方はこちらが参考になります</p>\n<ul class=\"list unordered\">\n<li><a href=\"https://www.webprofessional.jp/real-time-apps-websockets-server-sent-events/\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.webprofessional.jp/real-time-apps-websockets-server-sent-events/</a></li>\n<li><a href=\"http://labs.gree.jp/blog/2014/08/11070/\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">http://labs.gree.jp/blog/2014/08/11070/</a></li>\n<li><a href=\"https://www.w3.org/TR/eventsource/\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.w3.org/TR/eventsource/</a></li>\n</ul>\n<p class=\"paragraph\">正直「WebSocketで良くない？」って雰囲気のある技術ですが、\n仕様がシンプルなので好きな技術なのです:smirk_cat:</p>\n<h2 class=\"heading lv-2\">コード</h2>\n<p class=\"paragraph\">まずはプロジェクト構成</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown pre\"><code class=\"language-unknown code\">├── main.go\n└── static\n    └── index.html</code></pre></div>\n<p class=\"paragraph\">とてもシンプルです\n実際の各ファイルの中身を見ていきます</p>\n<h3 class=\"heading lv-3\">./main.go</h3>\n<div class=\"has-filename\"><div class=\"filename\">./main.go</div><pre class=\"language-go pre\"><code class=\"language-go code\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">sse</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tflusher<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> w<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>Flusher<span class=\"token punctuation\">)</span>\n\n\tw<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/event-stream\"</span><span class=\"token punctuation\">)</span>\n\tw<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cache-Control\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no-cache\"</span><span class=\"token punctuation\">)</span>\n\tw<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connection\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"keep-alive\"</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 1秒おきにデータを流す</span>\n\tt <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTicker</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcnt <span class=\"token operator\">:=</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&#x3C;-</span>t<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">:</span>\n\t\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"data: %d\\n\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span>\n\t\t\t\tcnt<span class=\"token operator\">++</span>\n\t\t\t\tflusher<span class=\"token punctuation\">.</span><span class=\"token function\">Flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">&#x3C;-</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"コネクションが閉じました\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tdir <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Dir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./static\"</span><span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/event\"</span><span class=\"token punctuation\">,</span> sse<span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">FileServer</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 class=\"heading lv-4\">解説</h4>\n<p class=\"paragraph\"><code class=\"code\">main</code>関数については特に説明は不要かと思いますので\n<code class=\"code\">func sse(...)</code>について処理を追って説明をしていきます。</p>\n<h5 class=\"heading lv-5\">レスポンスヘッダーの設定</h5>\n<div class=\"remark-highlight\"><pre class=\"language-go pre\"><code class=\"language-go code\">w<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/event-stream\"</span><span class=\"token punctuation\">)</span>\nw<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cache-Control\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no-cache\"</span><span class=\"token punctuation\">)</span>\nw<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connection\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"keep-alive\"</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p class=\"paragraph\">まずはレスポンスヘッダーに必要な項目を設定します。\nここについては見慣れたコードになりますね。</p>\n<h5 class=\"heading lv-5\">Flusherへのキャスト</h5>\n<div class=\"remark-highlight\"><pre class=\"language-go pre\"><code class=\"language-go code\">flusher<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> w<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>Flusher<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p class=\"paragraph\">ここが一番のキモです！:point_up:\n<code class=\"code\">http.ResponseWriter</code>を<code class=\"code\">http.Flusher</code>へキャストします。\n<code class=\"code\">http.Flusher</code>とはResponseWritersに実装されたインタフェースで、\nバッファしているデータをクライアントへフラッシュするものです。</p>\n<p class=\"paragraph\">後述しますが<code class=\"code\">flusher.Flush()</code>をすることで、\n書き込んだ内容をすぐにクライアントサイドへ送信することができます。</p>\n<h5 class=\"heading lv-5\">イベントの送信</h5>\n<div class=\"remark-highlight\"><pre class=\"language-go pre\"><code class=\"language-go code\">t <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTicker</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">defer</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tcnt <span class=\"token operator\">:=</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&#x3C;-</span>t<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">:</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"data: %d\\n\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span>\n\t\t\tcnt<span class=\"token operator\">++</span>\n\t\t\tflusher<span class=\"token punctuation\">.</span><span class=\"token function\">Flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p class=\"paragraph\">１秒おきにカウントアップした値を送信しています。\n<code class=\"code\">fmt.Fprintf</code>で書き込んだ後に、先程用意した<code class=\"code\">flusher.Flush()</code>を読んであげましょう。\nこうすることで書き込んだ内容がクライアントへ送信されます。\n<code class=\"code\">data: XX\\n\\n</code>というのはSSEの仕様であり、\n他にも<code class=\"code\">event</code>や<code class=\"code\">id</code>を設定することで柔軟なイベント駆動が可能になるのですが、\nここではシンプルに<code class=\"code\">data</code>だけを送信します。</p>\n<h4 class=\"heading lv-4\">クローズ処理</h4>\n<div class=\"remark-highlight\"><pre class=\"language-go pre\"><code class=\"language-go code\"><span class=\"token comment\">// notify := w.(http.CloseNotifier).CloseNotify()</span>\n<span class=\"token comment\">// &#x3C;-notify</span>\n<span class=\"token operator\">&#x3C;-</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"コネクションが閉じました\"</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p class=\"paragraph\"><del>ここでは<code class=\"code\">http.ResponseWriter</code>を<code class=\"code\">http.CloseNotifier</code>へとキャストします。\nキャスト後に<code class=\"code\">CloseNotify()</code>の戻り値で</del>\nコネクションが閉じたかどうかが<code class=\"code\">chan bool</code>返却されるため取得します。</p>\n<p class=\"paragraph\"><strong>-- 2020/03/05 追記 --</strong>\n<code class=\"code\">CloseNotifier</code>はだいぶ前に非推奨になったということなので\n<code class=\"code\">r.Context().Done()</code> を利用してコネクションが閉じたかを判定するほうが良いです。\n<strong>-- 追記ここまで --</strong></p>\n<p class=\"paragraph\">あとはこのチャンネルを監視し処理を止めておくことでSSE実装完了です！\nちなみに前述した<code class=\"code\">Ticker</code>は<code class=\"code\">defer t.Stop()</code>しているので勝手に止まってくれます。</p>\n<h3 class=\"heading lv-3\">./static/index.html</h3>\n<p class=\"paragraph\">用意したエンドポイントへつなぐ部分です。\nheadタグなど書いても仕方ないので、bodyの中身だけ抜粋します。</p>\n<div class=\"has-filename\"><div class=\"filename\">./static/index.html&#x3C;body></div><pre class=\"language-html pre\"><code class=\"language-html code\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span>count: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cnt<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">const</span> ev <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/event'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ev<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      cnt<span class=\"token punctuation\">.</span><span class=\"token property-access\">textContent</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p class=\"paragraph\"><code class=\"code\">EventSource</code>といったものを利用することで、\n簡単に先程用意したエンドポイントへ接続することができます。</p>\n<h2 class=\"heading lv-2\">まとめ</h2>\n<p class=\"paragraph\">SSE自体がHTTPの簡単な仕様の上で成り立っているので、\n標準ライブラリのみで簡単に実装ができました。</p>\n<p class=\"paragraph\">実際に利用する場合には、\n<code class=\"code\">flusher</code>をハンドラ外で管理したり、外部のイベントストリームを監視したりと、\n色々とロジックが必要になりますが、SSEの実装部分としてはこれだけです。</p>\n<p class=\"paragraph\">簡単にサーバーサイドプッシュを実装したいときには\n有力な候補になるかなとおもいます:relaxed:</p>\n<p class=\"paragraph\">おしまい</p>"},"__N_SSG":true}