{"pageProps":{"post":"{\"slug\":\"unicode_circle_number\",\"title\":\"Unicodeの丸数字（①とか）でやられた件\",\"publishedAt\":\"2019-01-10T22:20:07.000Z\",\"description\":\"業務内でUnicodeの丸数字の罠にハマったのでその共有と解説です。\",\"tags\":[\"JavaScript\",\"文字コード\"]}","content":"<h2 class=\"heading lv-2\">注意</h2>\n<p class=\"paragraph\">記事の内容上、機種依存文字を使用しているため、\n環境によっては文字が読みづらい状況となっていますがご了承くださいm(_ _)m</p>\n<h2 class=\"heading lv-2\">はじめに</h2>\n<p class=\"paragraph\">みなさん、丸数字というもの使っていますか？？\n<code class=\"code\">①</code>みたいに数字をまるで囲んであるやつです。ちなみに<code class=\"code\">㊿</code>まで存在します。</p>\n<p class=\"paragraph\">そんなに進んで利用することも少ないと思いますが、\n今回要件でリストの上から順番に丸数字を振ってほしいとリクエストが有りました。</p>\n<p class=\"paragraph\">「ただ連番降るだけっしょ！」と取り掛かったのですが、\n考えていた実装と異なる内容になったのでよかったら参考にしてください。</p>\n<h2 class=\"heading lv-2\">実装</h2>\n<p class=\"paragraph\">まず<code class=\"code\">㊿</code>までしかないです！ってことで、<code class=\"code\">㊿</code>までで良いとお許しをもらえました。\nとりあえず一安心:relaxed:</p>\n<h3 class=\"heading lv-3\">実装その①</h3>\n<p class=\"paragraph\"><code class=\"code\">①</code>のコードを取得して順に足していけば、それっぽくなるだろうという考えから\n↓のようなコードを書きました（JavaScriptです）</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript pre\"><code class=\"language-javascript code\"><span class=\"token keyword\">function</span> <span class=\"token function\">toCircled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> base <span class=\"token operator\">=</span> <span class=\"token string\">'①'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromCharCode</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">+</span> num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 入力チェックは省略</span>\n</code></pre></div>\n<p class=\"paragraph\">それっぽい関数もできたのでいざ動作確認</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript pre\"><code class=\"language-javascript code\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toCircled</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ①</span>\n<span class=\"token comment\">// ②</span>\n<span class=\"token comment\">// ③</span>\n<span class=\"token comment\">// ...   いい調子！</span>\n<span class=\"token comment\">// ⑲</span>\n<span class=\"token comment\">// ⑳</span>\n<span class=\"token comment\">// ⑴    ！？</span>\n<span class=\"token comment\">// ⑵    ！！？？</span>\n</code></pre></div>\n<p class=\"paragraph\"><code class=\"code\">⑳</code>から先で違うパターンの数字が出てきたー:scream:\n<code class=\"code\">㉑</code>から別の場所にあるのか...</p>\n<h4 class=\"heading lv-4\">コード値を調べてみる</h4>\n<div class=\"remark-highlight\"><pre class=\"language-javascript pre\"><code class=\"language-javascript code\"><span class=\"token string\">'①'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> 9312</span>\n<span class=\"token string\">'⑳'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> 9331</span>\n<span class=\"token string\">'㉑'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> 12881</span>\n</code></pre></div>\n<p class=\"paragraph\">だいぶ飛んでる。\n２０で条件分岐するようにします！</p>\n<h3 class=\"heading lv-3\">実装その②</h3>\n<p class=\"paragraph\">２１以上の場合は<code class=\"code\">㉑</code>を基準にするように変更しました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript pre\"><code class=\"language-javascript code\"><span class=\"token keyword\">function</span> <span class=\"token function\">toCircled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> base <span class=\"token operator\">=</span> <span class=\"token string\">'①'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromCharCode</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">+</span> num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> base <span class=\"token operator\">=</span> <span class=\"token string\">'㉑'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromCharCode</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">+</span> num <span class=\"token operator\">-</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">いざ動作確認</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript pre\"><code class=\"language-javascript code\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toCircled</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ①</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// ⑳</span>\n<span class=\"token comment\">// ㉑    よっしゃ！！</span>\n<span class=\"token comment\">// ㉒</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// ㉞</span>\n<span class=\"token comment\">// ㉟</span>\n<span class=\"token comment\">// ㉠    ！？</span>\n<span class=\"token comment\">// ㉡    ！！？？</span>\n</code></pre></div>\n<p class=\"paragraph\">３６にまた見えない壁があったのか...\nここでようやくGoogle先生にご相談　\nWikipadiaにまさに<a href=\"https://ja.wikipedia.org/wiki/%E4%B8%B8%E6%95%B0%E5%AD%97\" class=\"anchor\" rel=\"noopener noreferrer\" target=\"_blank\">丸数字のページ</a>が！！！</p>\n<p class=\"paragraph\">最初に２０で躓いたときに見るべきでした:weary:</p>\n<h3 class=\"heading lv-3\">実装その③ （最終版）</h3>\n<div class=\"remark-highlight\"><pre class=\"language-javascript pre\"><code class=\"language-javascript code\"><span class=\"token keyword\">function</span> <span class=\"token function\">toCircled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> base <span class=\"token operator\">=</span> <span class=\"token string\">'①'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromCharCode</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">+</span> num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> base <span class=\"token operator\">=</span> <span class=\"token string\">'㉑'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromCharCode</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">+</span> num <span class=\"token operator\">-</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> base <span class=\"token operator\">=</span> <span class=\"token string\">'㊱'</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromCharCode</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">+</span> num <span class=\"token operator\">-</span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p class=\"paragraph\">これで動くはず...っ！！</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript pre\"><code class=\"language-javascript code\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toCircled</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ①</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// ㉟</span>\n<span class=\"token comment\">// ㊱    やったー！</span>\n<span class=\"token comment\">// ㊲</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// ㊿</span>\n</code></pre></div>\n<h2 class=\"heading lv-2\">あとがき</h2>\n<p class=\"paragraph\">２,３行で終わると思っていたので、ここまで大きくなるとは思っていませんでした。\nそして最初につまずいた段階で「他にもあるのでは...?」という疑問を持てなかったことが今回の敗因です。</p>\n<p class=\"paragraph\">もし何かの参考になればと思います( ˘꒳˘  )</p>\n<p class=\"paragraph\">おしまい</p>"},"__N_SSG":true}